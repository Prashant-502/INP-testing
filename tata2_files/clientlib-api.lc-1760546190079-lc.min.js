/* IE Handling Script Implementation */
(function (_global) {
    if(_global){
        /**Script to Handle "name" property of all the Function objects - Start**/
        var setName = function setName(fn) {
            if(fn===Function){
                Object.defineProperty(Function.prototype, 'name', {
                    get: function() {
                        var name = "";
                        if((this.hasOwnProperty!== undefined) && (typeof(this.hasOwnProperty)==="function") && this.hasOwnProperty('name')){
                            name = (this.toString().match(/^function\s*([^\s(]+)/) || [])[1];
                            try{Object.defineProperty(this, 'name', { value: name });}
                            catch(e){console.info(this," already name defined");}
                        }
                        return name;
                    }
                });
            }
            if ((typeof(fn)==="function")) {
                var fnExpr = fn.toString().split("function ");
                var name = (fnExpr && fnExpr.length>1) ?  (fnExpr[1].split("()")[0]) : "";
                try{Object.defineProperty(fn, 'name', {get: function() {return name;}});}
                catch(e){console.info(this," already name defined");}
            }
        };
        Object.getOwnPropertyNames(_global)
            .filter(function(eachObj){return (typeof(_global[eachObj])==="function") && (_global[eachObj].name===undefined);})
            .forEach(function (fnName) { setName(_global[fnName]);});
        /**Script to Handle "name" property of all the Function objects - End**/
    }
})(window);

(function () {

	  if ( typeof window.CustomEvent === "function" ) return false;

	  function CustomEvent ( event, params ) {
	    params = params || { bubbles: false, cancelable: false, detail: undefined };
	    var evt = document.createEvent( 'CustomEvent' );
	    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
	    return evt;
	   }

	  CustomEvent.prototype = window.Event.prototype;

	  window.CustomEvent = CustomEvent;
})();


/*******************************************JS Helper - Start******************************************************/

/**
 * This module consist all the required helper function .
 * This module is to enhance its implementation. Keep adding commonly used functions in this module and use this module as dependency.
 */
(function (_global) {

    var _jsHelper = (function () {

        var jsHelperObj = {};

        var noopFunc = function(){};
        
        var isIE = function isIE(testEdge){
            if(isDefined(navigator) && isDefined(navigator.userAgent)){
                var ieRegex = /(Trident\/)/;
                var edgeRegex = /(Edge\/)/;
                return ieRegex.test(navigator.userAgent) && (testEdge===true ? edgeRegex.test(navigator.userAgent) : true);
            }
            return false;
        }
        jsHelperObj.isIE = jsHelperObj.isIE = isIE;

        var not = function notOperator(boolVal) {
            return isBool(boolVal) ? !boolVal : boolVal;
        }
        jsHelperObj.notOperator = jsHelperObj.not = not;

        var and = function andOperator(condition1, condition2) {
            if (not((isBool(condition1) && isBool(condition2)))) {
                return false;
            }
            return (condition1 && condition2);
        }
        jsHelperObj.andOperator = jsHelperObj.and = and;

        var andMany = function andOperatorMany() {
            var result = true;
            for (var i in arguments) {
                result = and(result, arguments[i]);
            }
            return result;
        }
        jsHelperObj.andOperatorMany = jsHelperObj.andMany = andMany;

        var or = function orOperator(condition1, condition2) {
            if (not((isBool(condition1) && isBool(condition2)))) {
                return false;
            }
            return (condition1 || condition2);
        }
        jsHelperObj.orOperator = jsHelperObj.or = or;

        var orMany = function orOperatorMany() {
            var result = false;
            for (var i in arguments) {
                result = or(result, arguments[i]);
            }
            return result;
        }
        jsHelperObj.orOperatorMany = jsHelperObj.orMany = orMany;

        var _opOneWithMany = function _operatorOneWithMany(fnOp,args){
            if(andMany(isFunc(fnOp),isDefined(args),_isLenPropDef(args))){
                var status = isEqRef(fnOp,and);
                if(isGt(args.length,2)){
                    var value = args[0];
                    var fnBool = isEqRef(fnOp,and) ? isFalse : isTrue;
                    for(var i=1; isLt(i,args.length); i++){
                        status = fnOp(status,isEqVal(value,args[i]));
                        if(fnBool(status)){
                            break;
                        }
                    }
                }
                return status;
            }
            return false;
        };

        var orOneWithMany = function orOneWithMany(){
            return _opOneWithMany(or,arguments);
        };
        jsHelperObj.orOneWithMany = jsHelperObj.orOneWithMany = orOneWithMany;

        var andOneWithMany = function andOneWithMany(){
            return _opOneWithMany(and,arguments);
        };
        jsHelperObj.andOneWithMany = jsHelperObj.andOneWithMany = andOneWithMany;

        var ternaryFunc = function ternaryOperatorFunction(condition, conditionTrueValue, conditionFalseValue) {
            if(orMany(isUndefined(condition), isUndefined(conditionTrueValue), isUndefined(conditionFalseValue))){
                return false;
            }
            return condition ? conditionTrueValue : conditionFalseValue;
        };
        jsHelperObj.ternaryOperatorFunction = jsHelperObj.ternaryFunc = ternaryFunc;

        var isEqRef = function isEqualByReference() {
            var mingArg = 2;
            if (isLt(arguments.length, mingArg)) {
                exceptionUtility.throwErr("Minumum " + mingArg + " arguments required!")
            }
            for (var i = 0; i < arguments.length - 1; i++) {
                if (arguments[i] !== arguments[i + 1]) {
                    return false;
                }
            }
            return true;
        }
        jsHelperObj.isEqualByReference = jsHelperObj.isEqRef = isEqRef;

        var isEqVal = function isEqualByValue(val1, val2, caseInsensitive) {
            var val1Str = String(val1);
            var val2Str = String(val2);
            if (isTrue(caseInsensitive)) {
                val1Str = val1Str.toLowerCase();
                val2Str = val2Str.toLowerCase();
            }
            return isEqRef(val1Str, val2Str);
        }
        jsHelperObj.isEqualByValue = jsHelperObj.isEqVal = isEqVal;

        var isEqValMany = function isEqualByValueMany() {
            for (var i = 0; i < arguments.length - 1; i++) {
                if (!isEqVal(arguments[i], arguments[i + 1])) {
                    return false;
                }
            }
            return true;
        }
        jsHelperObj.isEqualByValueMany = jsHelperObj.isEqValMany = isEqValMany;

        var isEqValManyCI = function isEqualByValueManyCI() {
            for (var i = 0; i < arguments.length - 1; i++) {
                if (!isEqVal(arguments[i], arguments[i + 1], true)) {
                    return false;
                }
            }
            return true;
        }
        jsHelperObj.isEqualByValueManyCI = jsHelperObj.isEqValManyCI = isEqValManyCI;

        var isGt = function isGreaterThan(val1, val2) {
            return (isNum(val1) && isNum(val2)) ? (val1 > val2) : false;
        }
        jsHelperObj.isGreaterThan = jsHelperObj.isGt = isGt;

        var isLt = function isLessThan(val1, val2) {
            return (isNum(val1) && isNum(val2)) ? (val1 < val2) : false;
        }
        jsHelperObj.isLessThan = jsHelperObj.isLt = isLt;

        var isDefined = function isDefined(val,strict) {
            return not(isUndefined(val,isTrue(strict)));
        };
        jsHelperObj.isDefined = jsHelperObj.isDef = isDefined;

        var isUndefined = function isUndefined(val,strict) {
            return isTrue(strict) ? (val===undefined) : (val ? false : true);
        };
        jsHelperObj.isUndefined = jsHelperObj.isUndef = isUndefined;

        var isNull = function isNullStrict(val) {
            return isEqVal(val, null);
        };
        jsHelperObj.isNull = jsHelperObj.isNull = isNull;

        var isNonNull = function isNonNullStrict(val) {
            return !isNull(val);
        };
        jsHelperObj.isNonNull = jsHelperObj.isNonNull = isNonNull;

        var isTrue = function isBooleanTrue(val) {
            return val === true;
        };
        jsHelperObj.isTrue = isTrue;

        var isFalse = function isBooleanFalse(val) {
            return val === false;
        };
        jsHelperObj.isFalse = isFalse;

        var isFunc = function isFunction(fn) {
            return isDefined(fn) && (fn instanceof Function);
        };
        jsHelperObj.isFunction = jsHelperObj.isFunc = isFunc;

        var isObj = function isObject(obj) {
            return isDefined(obj) && (obj instanceof Object);
        };
        jsHelperObj.isObject = jsHelperObj.isObj = isObj;

        var isStr = function isString(str) {
            return isDefined(str,true) && ((str instanceof String) || (typeof (str) === String.name.toLowerCase()));
        };
        jsHelperObj.isString = jsHelperObj.isStr = isStr;

        var isNum = function isNumber(num,allowBool) {
            num = and(isTrue(allowBool),isTrue(num)) ? 1 : and(isTrue(allowBool),isFalse(num)) ? 0 : num;
            return isDefined(num,true) && ((num instanceof Number) || (typeof (num) === Number.name.toLowerCase()));
        };
        jsHelperObj.isNumber = jsHelperObj.isNum = isNum;

        var isInt = function isInteger(num) {
            return isNum(num) && Number.isSafeInteger(num);
        };
        jsHelperObj.isInteger = jsHelperObj.isInt = isInt;

        var isBool = function isBoolean(bool) {
            return ((bool instanceof Boolean) || (typeof (bool) === Boolean.name.toLowerCase()));
        };
        jsHelperObj.isBoolean = jsHelperObj.isBool = isBool;

        var isArr = function isArray(arr) {
            return Array.isArray(arr);
        };
        jsHelperObj.isArray = jsHelperObj.isArr = isArr;

        var _isLenPropDef = function isLengthPropertyDefined(val) {
            return isDefined(val,true) && isDefined(val.length,true);
        };

        var isEmpArr = function isEmptyArray(arr) {
            return _isLenPropDef(arr) && isEqVal(arr.length, 0);
        };
        jsHelperObj.isEmpArr = jsHelperObj.isEmptyArray = isEmpArr;

        var isEmpObj = function isEmptyObject(obj) {
            return isDefined(obj) && isObj(obj) && isEmpArr(Object.keys(obj));
        };
        jsHelperObj.isEmpObj = jsHelperObj.isEmptyObject = isEmpObj;

        var isFormData = function (formData) {
            return isFunc(FormData) ? (formData instanceof FormData) : false;
        };
        jsHelperObj.isFormData = jsHelperObj.isFormData = isFormData;

        var arrIncludes = function arrayIncludes(arr, val) {
            return isArr(arr) && !arr.every(function(eachVal, index, arr) {return eachVal !== val;});
        };
        jsHelperObj.arrayIncludes = jsHelperObj.arrIncludes = arrIncludes;

        var arrFill = function arrayFill(fillValue, arrOrCount) {
            return Array.apply(null, isArr(arrOrCount) ? arrOrCount : (Array(arrOrCount))).map(function () { return isObj(fillValue) ? jsHelper.cloneObj(fillValue, true) : fillValue });
        };
        jsHelperObj.arrFill = jsHelperObj.arrayFill = arrFill;

        var arrOfArrConcat = function arrayOfArrayConcat(arrOfArr) {
            return toArr(arrOfArr).reduce(function (p, n) {
                return p.concat(n)
            });
        };
        jsHelperObj.arrOfArrConcat = jsHelperObj.arrayOfArrayConcat = arrOfArrConcat;

        var isDate = function isDate(date) {
            return (date instanceof Date);
        };
        jsHelperObj.isDate = jsHelperObj.isDate = isDate;

        var isValidDate = function isValidDate(date) {
            return isDate(date) ? true : not(((new Date(Date.parse(date))).toDateString()==="Invalid Date"));
        };
        jsHelperObj.isValidDate = jsHelperObj.isValidDate = isValidDate;

        var toDateByTimeZoneOffset = function toDateByTimeZoneOffset(utcDate,timezoneOffset){
            if(isTrue(isIE())){
                utcDate = utcDate.replace(/-/g,"/");
            }
            if(isValidDate(utcDate) && isNum(timezoneOffset)){
                utcDate = isStr(utcDate) ? new Date(Date.parse(utcDate)) : utcDate;
                return new Date(Date.UTC(utcDate.getFullYear(),utcDate.getMonth(),utcDate.getDate(),utcDate.getHours(),utcDate.getMinutes(),utcDate.getSeconds(),utcDate.getMilliseconds()) + ((timezoneOffset + utcDate.getTimezoneOffset())*60000));
            }
            return utcDate;
        } 

        var toISTDate = function toISTDate(date){
            return toDateByTimeZoneOffset(date,330);
        }
        jsHelperObj.toISTDate = jsHelperObj.toISTDate = toISTDate;

        var toObj = function toObject(obj, defaultObj) {
            return isObj(obj) ? obj : (isObj(defaultObj) ? defaultObj : Object.create({}));
        };
        jsHelperObj.toObject = jsHelperObj.toObj = toObj;

        var toArr = function toArray(arr, defaultArr) {
            return isArr(arr) ? arr : (isArr(defaultArr) ? defaultArr : Object.create([]));
        };
        jsHelperObj.toArray = jsHelperObj.toArr = toArr;

        var toStr = function toString(val, defaultVal) {
            return isDefined(val) ? String(val) : (isDefined(defaultVal) ? String(defaultVal) : String());
        };
        jsHelperObj.toString = jsHelperObj.toStr = toStr;

        var toNum = function toNumber(val, defaultVal) {
            return (and(isDefined(val,true),not(isEqVal(Number(val),Number.NaN))))
                ? Number(val) : (isNum(defaultVal,true) ? toNumber(defaultVal,Number.NaN) : Number.NaN);
        };
        jsHelperObj.toNumber = jsHelperObj.toNum = toNum;

        var objKeys = function objectKeys(obj) {
            return ternaryFunc(isObj(obj), Object.keys(obj), []);
        };
        jsHelperObj.objectKeys = jsHelperObj.objKeys = objKeys;

        var objVals = function objectValues(obj) {
            return objKeys(obj).map(function (key) {
                return obj[key];
            });
        };
        jsHelperObj.objectValues = jsHelperObj.objVals = objVals;

        var freezeObj = function freezeObject(obj) {
            return Object.freeze(obj);
        };
        jsHelperObj.freezeObject = jsHelperObj.freezeObj = freezeObj;

        var deepFreezeObj = function deepFreezeObject(obj) {
            for (var key in obj) {
                var val = obj[key];
                if (isObj(val)) {
                    deepFreezeObject(val);
                }
            }
            return freezeObj(obj);
        };
        jsHelperObj.deepFreezeObject = jsHelperObj.deepFreezeObj = deepFreezeObj;

        var toCamelCase = function StringToCamelCase(str) {
            return str.split(/[_-]|\s+/).map(function (word, index) {
                return isEqVal(index,0) ? word.toLowerCase() : word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
            }).join('');
        };
        jsHelperObj.toCamelCase = jsHelperObj.toCC = toCamelCase;

        var toSentence = function StringToSentence(str) {
            return str.split(/[_-]|\s+/).map(function (word, index) {
                return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
            }).join(' ');
        };
        jsHelperObj.toSentence = jsHelperObj.toSentc = toSentence;

        var _shallowCopyObj = function shallowCopyObject(obj) {
            var clone = Object.create({});
            Object.keys(toObj(obj)).forEach(function (key) {
                clone[key] = obj[key];
            });
            return clone;
        };

        var _deepCopyObj = function deepCopyObject(obj) {
            var clone = {};
            for (var i in obj) {
                clone[i] = isFunc(obj[i]) ? obj[i] : (isObj(obj[i]) ? deepCopyObject(obj[i]) : obj[i]);
            }
            return clone;
        };

        var cloneObj = function cloneObjectShallowAndDeep(obj, isDeep) {
            return isTrue(isDeep) ? _deepCopyObj(obj) : _shallowCopyObj(obj);
        };
        jsHelperObj.cloneObject = jsHelperObj.cloneObj = cloneObj;

        var defineReadOnlyObjectProperty = function defineReadOnlyObjectProperty(propContext, propName, getVal) {
            Object.defineProperty(propContext, propName, {
                get: function () {
                    return getVal;
                }
            });
            return true;
        };
        jsHelperObj.defineReadOnlyObjectProperty = jsHelperObj.defineReadOnlyObjProp = defineReadOnlyObjectProperty;

        var defineObjectProperty = function defineObjectProperty(propContext, propName,fnSetNotifier) {
            if(!isFunc(fnSetNotifier)){
                fnSetNotifier = noopFunc
            }

            Object.defineProperty(propContext, propName, {
                get: isFunc(propsObj[key]) ? propsObj[key] : noopFunc,
                set: function(value){
                    fnSetNotifier(key,value);
                }
            });
            return true;
        };
        jsHelperObj.defineObjectProperty = jsHelperObj.defineObjProp = defineObjectProperty;

        var defineReadOnlyObjectProperties = function defineReadOnlyObjectProperties(propContext, propsObj) {
            var propertiesObj = {};
            objKeys(propsObj).forEach(function (key) {
                propertiesObj[key] = {
                    get: function () {
                        return propsObj[key];
                    }
                }
            });
            return Object.defineProperties(propContext, propertiesObj);
        };
        jsHelperObj.defineReadOnlyObjectProperties = jsHelperObj.defineReadOnlyObjProps = defineReadOnlyObjectProperties;

        var defineObjectProperties = function defineObjectProperties(propContext, propsObj,fnGetNotifier,fnSetNotifier) {
            if(!isFunc(fnSetNotifier)){
                fnSetNotifier = noopFunc;
            }

            var propertiesObj = {};
            objKeys(propsObj).forEach(function (key) {
                propertiesObj[key] = {
                    get: isFunc(propsObj[key]) ? propsObj[key] : noopFunc,
                    set: function(value){
                        fnSetNotifier(key,value);
                    }
                }
            });
            return Object.defineProperties(propContext, propertiesObj);
        }
        jsHelperObj.defineObjectProperties = jsHelperObj.defineObjProps = defineObjectProperties;

        var flattenObject = function flattenObject(obj) {
            var toReturn = {};
            for (var i in obj) {
                if (!obj.hasOwnProperty(i)) continue;
                if (isObj(obj[i])) {
                    var flatObject = flattenObject(obj[i]);
                    for (var x in flatObject) {
                        if (!flatObject.hasOwnProperty(x)) continue;
                        toReturn[i + '.' + x] = flatObject[x];                    }
                } else {
                    toReturn[i] = obj[i];
                }
            }
            return toReturn;
        };
        jsHelperObj.flattenObject = jsHelperObj.flattenObj = flattenObject;

        var unflattenObject = function unflattenObject(obj) {
            var result = {}
            for (var i in obj) {
                var keys = i.split('.')
                keys.reduce(function (r, e, j) {
                    return r[e] || (r[e] = isNaN(Number(keys[j + 1])) ? (keys.length - 1 == j ? obj[i] : {}) : [])
                }, result)
            }
            return result
        };
        jsHelperObj.unflattenObject = jsHelperObj.unflattenObj = unflattenObject;

        var mapFlatObj = function updateFlatObjByKeyMap(keyMappingObj, fromObj, toObj) {
            if (andMany(isDefined(keyMappingObj),isDefined(fromObj),isDefined(toObj))) {
                Object.keys(keyMappingObj).forEach(function (key) {
                    var fromObjKey = key;
                    var toObjKey = keyMappingObj[key];
                    toObj[toObjKey] = fromObj[fromObjKey];
                });
                return toObj;
            }
        };
        jsHelperObj.mapFlatObject = jsHelperObj.mapFlatObj = mapFlatObj;

        var parseJson = function parseJson(jsonStr) {
            return JSON.parse(jsonStr);
        };
        jsHelperObj.parseJson = parseJson;

        var stringifyJson = function stringifyJson(json) {
            return JSON.stringify(json);
        };
        jsHelperObj.stringifyJson = stringifyJson;

        var cloneJson = function (obj) {
            return parseJson(stringifyJson(obj));
        };
        jsHelperObj.cloneJson = cloneJson;

        var extendFunc = function extendFunction(ParentFunc,ChildFunc){
            if(and(isFunc(ParentFunc),isFunc(ChildFunc))){
                ChildFunc.prototype = Object.create(ParentFunc.prototype);
                ChildFunc.prototype.constructor = ChildFunc;
                return true;
            }
            return false;
        };
        jsHelperObj.extendFunction = jsHelperObj.extendFunc = extendFunc;

        return freezeObj(jsHelperObj);
    })();

    _jsHelper.defineReadOnlyObjProp(_global, 'jsHelper', _jsHelper);


})(window || this || {});

/*******************************************JS Helper - End******************************************************/
/*******************************************Exception Handling Utility Module - Start******************************************************/

(function(_global){
    var _exceptionUtility = (function (jsHelper) {
        var exceptionUtility = {};
        
        var throwErr = function throwError(errorMsg){
            throw new Error(jsHelper.toStr(errorMsg));
        }        
        exceptionUtility.throwErr = exceptionUtility.throwError = throwErr;

        var dependencyCheck = function moduleDependencyExceptionCheck(moduleArr, moduleName) {
            if (Array.isArray(moduleArr)) {
                var filteredArr = moduleArr.filter(function (eachDependency) { return jsHelper.isDefined(eachDependency) });
                if (filteredArr.length == moduleArr.length) {
                    return;
                }
            }
            throwErr(jsHelper.toStr(moduleName) + " Module dependency missing!");
        }
        exceptionUtility.dependencyCheck = dependencyCheck;

        return jsHelper.freezeObj(exceptionUtility);
    })(_global.jsHelper);

    _global.jsHelper.defineReadOnlyObjProp(_global,'exceptionUtility',_exceptionUtility);
})(this);

/*******************************************Exception Handling Utility Module - End******************************************************/
/*******************************************App Config - Start******************************************************/

(function(_global){
    var _appConfig = (function (jsHelper) {
        if (exceptionUtility) {
            exceptionUtility.dependencyCheck([jsHelper], "App Config");
        }

        var appName = "tataaialifeinsurancecompanylimited";
        var contentRoot = "/content/" + appName;
        var apiRoot = contentRoot + "/api";
        var apiExtension = ".json";
        return jsHelper.freezeObj({
            appName: appName,
            contentRoot: contentRoot,
            apiRoot: apiRoot,
            apiExtension: apiExtension
        });
    })(_global.jsHelper);

    _global.jsHelper.defineReadOnlyObjProp(_global,'appConfig',_appConfig);
})(this);

/*******************************************App Config - Start******************************************************/
var apiConstants = {
    SELF_AUTHENTICATE: {
      name: "SELF_AUTHENTICATE",
      endpoint: "getjwtToken",
    },
    INSTA_API: {
      name: "INSTA_API",
      endpoint: "instagram-api-get",
    },
    PUBLIC_DISCLOSURE: {
      name: "PUBLIC_DISCLOSURE",
      endpoint: "publicdisclosure",
    },
    IFSC_CODE_CHECK: {
      name: "IFSC_CODE_CHECK",
      endpoint: "ifscCodeCheck",
    },
    POLICY_DOC_DOWNLOAD: {
      name: "POLICY_DOC_DOWNLOAD",
      endpoint: "policydocumentdownload",
    },
    PAN_NO_VALIDATION: {
      name: "PAN_NO_VALIDATION",
      endpoint: "pannovalidation",
    },
    PREMIUM_CERTIFICATE: {
      name: "PREMIUM_CERTIFICATE",
      endpoint: "premiumcertificate",
    },
    PREMIUM_RECEIPT_CERTIFICATE: {
      name: "PREMIUM_RECEIPT_CERTIFICATE",
      endpoint: "premiumcertificate",
    },
    RECIEPT_DOWNLOAD_STATEMENT: {
      name: "RECIEPT_DOWNLOAD_STATEMENT",
      endpoint: "receiptdownload",
    },
    NEFT_UPDATE: {
      name: "NEFT_UPDATE",
      endpoint: "neftUpdate",
    },
    NEFTY_PENNY: {
      name: "NEFTY_PENNY",
      endpoint: "neftPennyTesting",
    },
    UNIT_STATEMENT: {
      name: "UNIT_STATEMENT",
      endpoint: "unitstatement",
    },
    ACCOUNT_HOLDER_STATEMENT: {
      name: "ACCOUNT_HOLDER_STATEMENT",
      endpoint: "accountholderstatement",
    },
    GET_HISTORIC_STATEMENT: {
      name: "GET_HISTORIC_STATEMENT",
      endpoint: "getHistoricStatement",
    },
    CUST_INFO_SERVICE: {
      name: "CUST_INFO_SERVICE",
      endpoint: "customerPolicyInfoService",
    },
    CUST_VALIDATION_SERVICE: {
      name: "CUST_VALIDATION_SERVICE",
      endpoint: "customerValidationService",
    },
    OTP_MOBILE_EMAIL_SERVICE: {
      name: "OTP_MOBILE_EMAIL_SERVICE",
      endpoint: "triggerOTPMobileEmailService",
    },
    OTP_MOBILE_SERVICE: {
      name: "OTP_MOBILE_SERVICE",
      endpoint: "triggerOTPMobileService",
    },
    OTP_EMAIL_SERVICE: {
      name: "OTP_EMAIL_SERVICE",
      endpoint: "triggerOTPEmailService",
    },
    EMAIL_UPDATE_GEN_SERVICE: {
      name: "EMAIL_UPDATE_GEN_SERVICE",
      endpoint: "emailUpdateLinkGenService",
    },
    VALIDATE_EMAIL_UPDATE_SERVICE: {
      name: "VALIDATE_EMAIL_UPDATE_SERVICE",
      endpoint: "validateEmailUpdateLinkService",
    },
    EMAIL_SMS_SERVICE: {
      name: "EMAIL_SMS_SERVICE",
      endpoint: "triggerEmailAndSmsService",
    },
    EMAIL_SERVICE: {
      name: "EMAIL_SERVICE",
      endpoint: "triggerEmailService",
    },
    SAPLINGS_PLANTED_SERVICE: {
      name: "SAPLINGS_PLANTED_SERVICE",
      endpoint: "saplingsplantedservice",
    },
    POLICIES_SOLD_SERVICE: {
      name: "POLICIES_SOLD_SERVICE",
      endpoint: "policiessoldservice",
    },
    POLICIES_SOLD_IN_MONTH: {
      name: "POLICIES_SOLD_IN_MONTH",
      endpoint: "policiessoldinmonthservice",
    },
    TRACK_INDIVIDUAL_SERVICE: {
      name: "TRACK_INDIVIDUAL_SERVICE",
      endpoint: "trackclaimlifeservice",
    },
    TRACK_GROUP_SERVICE: {
      name: "TRACK_GROUP_SERVICE",
      endpoint: "trackclaimgroupservice",
    },
    PAN_UPDATE_SERVICE: {
      name: "PAN_UPDATE_SERVICE",
      endpoint: "panupdateservice",
    },
    EMAIL_UPDATE_SERVICE: {
      name: "EMAIL_UPDATE_SERVICE",
      endpoint: "emailUpdateService",
    },
    MOBILE_UPDATE_SERVICE: {
      name: "MOBILE_UPDATE_SERVICE",
      endpoint: "updateMobileNumberService",
    },
    TRIGGER_OTP_EMAILSERVICE: {
      name: "TRIGGER_OTP_EMAILSERVICE",
      endpoint: "triggerOtp",
    },
    TRIGGER_OTP_MOBILESERVICE: {
      name: "TRIGGER_OTP_MOBILESERVICE",
      endpoint: "triggerOtp",
    },
    VALIDATE_OTP_SERVICE: {
      name: "VALIDATE_OTP_SERVICE",
      endpoint: "nonExistingCustomerValidation",
    },
    WRITE_TO_US: {
      name: "WRITE_TO_US",
      endpoint: "writeToUs",
    },
    REQUEST_TO_CALL_BACK: {
      name: "REQUEST_TO_CALL_BACK",
      endpoint: "callback",
    },
    CREATE_LEAD: {
      name: "CREATE_LEAD",
      endpoint: "callcreateLead",
    },
    REQUEST_TRACKING_SERVICE: {
      name: "REQUEST_TRACKING_SERVICE",
      endpoint: "requestTrackingService",
    },
    SPLIT_PAYMENT: {
      name: "SPLIT_PAYMENT",
      endpoint: "splitpayment",
    },
    AGENT_ADVISOR: {
      name: "AGENT_ADVISOR",
      endpoint: "agentadvice",
    },
    REINVEST_ELIGIBILITY: {
      name: "REINVEST_ELIGIBILITY",
      endpoint: "reinvestEligibility",
    },
    PAY_U: {
      name: "PAY_U",
      endpoint: "payment/payu",
    },
    BUILDESK: {
      name: "BUILDESK",
      endpoint: "payment/billdesk",
    },
    FSS: {
      name: "FSS",
      endpoint: "payment/fss",
    },
    WHATSAPPOTPFORM: {
      name: "WHATSAPPOTPFORM",
      endpoint: "whatsAppOptIn",
    },
    PAYMENT_DETAILS: {
      name: "PAYMENT_DETAILS",
      endpoint: "getpaymentapldetails",
    },
    EIASERVICE: {
      name: "EIASERVICE",
      endpoint: "eiaService",
    },
    SERVICE_REQUEST_INTIMATION_SERVICE: {
      name: "SERVICE_REQUEST_INTIMATION_SERVICE",
      endpoint: "serviceRequestIntimationService",
    },
    INDUSIND: {
      name: "INDUSIND",
      endpoint: "payment/indusInd",
    },
    JIO_MONEY: {
      name: "JIO_MONEY",
      endpoint: "payment/jiomoney",
    },
    KISHT_FASTBANKING: {
      name: "KISHT_FASTBANKING",
      endpoint: "payment/kishtfastbanking",
    },
    PAYMEMT_GATEWAY_START_TRANSACTION: {
      name: "PAYMEMT_GATEWAY_START_TRANSACTION",
      endpoint: "paymentgatewaystarttransaction",
    },
    PAYMEMT_GATEWAY_POST_TRANSACTION: {
      name: "PAYMEMT_GATEWAY_POST_TRANSACTION",
      endpoint: "paymentGatewayPostRequest",
    },
    DIGIO_CREATE_FORM: {
      name: "DIGIO_CREATE_FORM",
      endpoint: "payment/digioCreateForm",
    },
    UPLOAD_DOC: {
      name: "UPLOAD_DOC",
      endpoint: "uploadDocuments",
    },
    UPLOAD_DOC_CRM: {
      name: "UPLOAD_DOC_CRM",
      endpoint: "uploadDocumentService",
    },
    CUSTOMER_GREVIANCE: {
      name: "CUSTOMER_GREVIANCE",
      endpoint: "griveance",
    },
    YOUNG_PIONEER_READ: {
      name: "YOUNG_PIONEER_READ",
      endpoint: "youngPioneerRead",
    },
    YOUNG_PIONEER_SAVE: {
      name: "YOUNG_PIONEER_SAVE",
      endpoint: "youngPioneerSave",
    },
    SWITCH_FUNDS_NAV_DETAILS: {
      name: "SWITCH_FUNDS_NAV_DETAILS",
      endpoint: "fundNAVDetailsService",
    },
    FUNDSWITCHNAVDATE: {
      name: "FUNDSWITCHNAVDATE",
      endpoint: "fundSwitchNavDate",
    },
    SWITCH_FUND_DETAILS_SERVICE: {
      name: "SWITCH_FUND_DETAILS_SERVICE",
      endpoint: "fundSwitchFundDetailsService",
    },
    SWITCH_FUND_REQUEST_SERVICE: {
      name: "SWITCH_FUND_REQUEST_SERVICE",
      endpoint: "fundswitchrequestservice",
    },
    REGISTER_CLAIM: {
      name: "REGISTER_CLAIM",
      endpoint: "registerClaimsService",
    },
    RECRUITMENT_SERVICE: {
      name: "RECRUITMENT_SERVICE",
      endpoint: "recruitmentPage",
    },
    SEND_OTP: {
      name: "SEND_OTP",
      endpoint: "sendOtp",
    },
    SHOWCATEGORY: {
      name: "SHOWCATEGORY",
      endpoint: "showCategoryService",
    },
    SHOWSUBCATEGORY: {
      name: "SHOWSUBCATEGORY",
      endpoint: "showSubCategoryService",
    },
    SHOWGRIEVANCECATEGORY: {
      name: "SHOWGRIEVANCECATEGORY",
      endpoint: "showgrievancecategoryservice",
    },
    GRIEVANCESUBCATEGORY: {
      name: "GRIEVANCESUBCATEGORY",
      endpoint: "grievancesubcategoryservice",
    },
    TERM_CALCULATOR: {
      name: "TERM_CALCULATOR",
      endpoint: "termcalculator",
    },
    SAVING_CALCULATOR: {
      name: "SAVING_CALCULATOR",
      endpoint: "savingcalculator",
    },
    PAYOUT_DETAIL_SERVICE: {
      name: "PAYOUT_DETAIL_SERVICE",
      endpoint: "payoutDetailsService",
    },
    UNCLAIME_GROUP_POLICY_EMPLOYER: {
      name: "UNCLAIME_GROUP_POLICY_EMPLOYER",
      endpoint: "ucGroupPolicyService",
    },
    UNCLAIMED_INDIVIDUAL_FUND: {
      name: "UNCLAIMED_INDIVIDUAL_FUND",
      endpoint: "unclaimedIndividualPolicyInfoService",
    },
    GROUP_POLICY: {
      name: "GROUP_POLICY",
      endpoint: "unclaimedGroupPolicyMasterList",
    },
    UNCLAIMED_GROUP_POLICY: {
      name: "UNCLAIMED_GROUP_POLICY",
      endpoint: "unclaimedgrouppolicyinfoservice",
    },
    UNCLAIMED_LIFE_POLICY_INFOSERVICE: {
      name: "UNCLAIMED_LIFE_POLICY_INFOSERVICE",
      endpoint: "unclaimedLifePolicyInfoService",
    },
    UNCLAIMED_DATA_SERVICE: {
      name: "UNCLAIMED_DATA_SERVICE",
      endpoint: "unclaimedIndividualData",
    },
    CITY_MEET_ADVISOR: {
      name: "CITY_MEET_ADVISOR",
      endpoint: "citymeetadvisor",
    },
    RETIREMENT_CALCULATOR: {
      name: "RETIREMENT_CALCULATOR",
      endpoint: "retirementCalculatorService",
    },
    ULIP_CALSERVICE: {
      name: "ULIP_CALSERVICE",
      endpoint: "ulipCalculatorService",
    },
    CIBIL_CALCULATOR: {
      name: "CIBIL_CALCULATOR",
      endpoint: "cibilCalculatorService",
    },
    MAP_AUTH_TOKEN: {
      name: "MAP_AUTH_TOKEN",
      endpoint: "map-auth-token",
    },
    GET_CITY_BY_LAT_LONG: {
      name: "GET_CITY_BY_LAT_LONG",
      endpoint: "get-city-by-lat-long",
    },
    GEOCODE: {
      name: "GEOCODE",
      endpoint: "geocode",
    },
    PLACE_DETAILS: {
      name: "PLACE_DETAILS",
      endpoint: "entity",
    },
    LOGIN_TOKEN: {
      name: "LOGIN_TOKEN",
      endpoint: "loginToken",
    },
    RESEND_OTP: {
      name: "RESEND_OTP",
      endpoint: "resendOTP",
    },
    SEARCH_IFSCCODE_BANKNAME: {
      name: "SEARCH_IFSCCODE_BANKNAME",
      endpoint: "searchIfsccodeBanknameService",
    },
    SHOWNACHAUTOPAYSERVICE: {
      name: "SHOWNACHAUTOPAYSERVICE",
      endpoint: "showNachAutopayService",
    },
    SAVENACHDETAILS: {
      name: "SAVENACHDETAILS",
      endpoint: "saveNachDetails",
    },
    GET_ACKNOWLEDGMENT_SERVICE: {
      name: "GET_ACKNOWLEDGMENT_SERVICE",
      endpoint: "getAcknowledgmentService",
    },
    /* SOLR intgeration */
    GLOBAL_SERACH_SOLR: {
      name: "GLOBAL_SERACH_SOLR",
      endpoint: "globalsearch",
    },
    PRACTO: {
      name: "PRACTO",
      endpoint: "practo",
    },
    IP_ADDRESS: {
      name: "IP_ADDRESS",
      endpoint: "address",
    },
    NAVINVESTMENTRATINGPROFILE: {
      name: "NAVINVESTMENTRATINGPROFILE",
      endpoint: "navInvestmentRatingProfile",
    },
    FUNDOBJECTDETAILSSERVICE: {
      name: "FUNDOBJECTDETAILSSERVICE",
      endpoint: "fundObjectDetailsService",
    },
    SHOWMASTERFUNDSERVICE: {
      name: "SHOWMASTERFUNDSERVICE",
      endpoint: "showMasterFundService",
    },
    TRIGGER_OTP_CALSERVICE: {
      name: "TRIGGER_OTP_CALSERVICE",
      endpoint: "trigger-otp-cal",
    },
    VALIDAT_OTP_CALSERVICE: {
      name: "VALIDAT_OTP_CALSERVICE",
      endpoint: "validate-otp-cal",
    },
    REGENERATE_OTP_NONEXISTING_CUSTOMER_SERVICE: {
      name: "REGENERATE_OTP_NONEXISTING_CUSTOMER_SERVICE",
      endpoint: "regenerate_otp_nonexisting_customer_service",
    },
    SENT_CONSENT_SERVICE: {
      name: "SENT_CONSENT_SERVICE",
      endpoint: "sentConsent",
    },
    SHOWPREMIUMRECEIPTMONTHS: {
      name: "SHOWPREMIUMRECEIPTMONTHS",
      endpoint: "showPremiumReceiptMonths",
    },
    PREMIUMRECEIPTDOWNLOAD: {
      name: "PREMIUMRECEIPTDOWNLOAD",
      endpoint: "premiumReceiptDownload",
    },
    PRACTO_REGISTRATION: {
      name: "PRACTO_REGISTRATION",
      endpoint: "practoregistration",
    },
    PRACTO_SUBSCRIPTION: {
      name: "PRACTO_SUBSCRIPTION",
      endpoint: "practosubscription",
    },
    VALIDATEFUNDSWITCH: {
      name: "VALIDATEFUNDSWITCH",
      endpoint: "validateFundSwitch",
    },
    SHOWUNSUCCESSCOUNT: {
      name: "SHOWUNSUCCESSCOUNT",
      endpoint: "showUnsuccessCount",
    },
    ULIP_MASTER_MULTIPLIER: {
      name: "ULIP_MASTER_MULTIPLIER",
      endpoint: "ulipMasterMultiplier",
    },
    VALIDATE_POLICY_REVIVAL: {
      name: "VALIDATE_POLICY_REVIVAL",
      endpoint: "validatePolicyRevival",
    },
    VALIDATENEFTPENNYSERVICE: {
      name: "VALIDATENEFTPENNYSERVICE",
      endpoint: "validateNeftPennyService",
    },
    LEADER_API: {
      name: "LEADER_API",
      endpoint: "saveLeader",
    },
    FUNDSWITCH_REQUEST_AUDIT: {
      name: "FUNDSWITCH_REQUEST_AUDIT",
      endpoint: "fundSwitchRequestAudit",
    },
    POLICY_REVIVALQUESTIONS_SERVICE: {
      name: "POLICY_REVIVALQUESTIONS_SERVICE",
      endpoint: "policyRevivalQuestionsService",
    },
    OFFER_MASTER_SERVICE: {
      name: "OFFER_MASTER_SERVICE",
      endpoint: "offerMasterService",
    },
    GET_REPORT_LIST: {
      name: "GET_REPORT_LIST",
      endpoint: "getReportList",
    },
    SHOW_DATA: {
      name: "SHOW_DATA",
      endpoint: "showData",
    },
    REDIRECTION_ACCESS_TOKEN: {
      name: "REDIRECTION_ACCESS_TOKEN",
      endpoint: "redirectionAccessToken",
    },
    FETCH_CUSTOMER: {
      name: "FETCH_CUSTOMER",
      endpoint: "fetchcustomer",
    },
    TRACK_SR: {
      name: "TRACK_sR",
      endpoint: "trackSr",
    },
    TOKEN_REGENERATE: {
      name: "TOKEN_REGENERATE",
      endpoint: "tokenRegenerateService",
    },
    SELF_AUTHENTICATE_CLAIM: {
      name: "SELF_AUTHENTICATE_CLAIM",
      endpoint: "selfAuthenticateClaim",
    },
    VALIDATE_OTP_CLAIM: {
      name: "VALIDATE_OTP_CLAIM",
      endpoint: "validateOTPClaim",
    },
    SUBMIT_CLAIM: {
      name: "SUBMIT_CLAIM",
      endpoint: "submitClaim",
    },
    VYMO_OBJECTS: {
      name: "VYMO_OBJECTS",
      endpoint: "vymoObjects",
    },
    TRUECALLER: {
      name: "TRUECALLER",
      endpoint: "truecaller",
    },
    TRUECALLER_SHAFT: {
      name: "TRUECALLER_SHAFT",
      endpoint:
        "https://34.139.151.113/tata-aia-true-caller-shaft-data/truecaller/",
      uatDomain: "",
      prodDomain: "",
    },
    FUND_LIST: {
      name: "FUND_LIST",
      endpoint: "fundlist",
    },
    FUND_DETAILS: {
      name: "FUND_DETAILS",
      endpoint: "funddetails",
    },
    ADD_CONSENT_DET: {
      name: "ADD_CONSENT_DET",
      endpoint: "addConsentDet",
    },
    WEBSITETO_BOREDIRECTION: {
      name: "WEBSITETO_BOREDIRECTION",
      endpoint: "websitetoboredirection",
    },
    RECAPTCHA_VERIFICATION: {
      name: "RECAPTCHA_VERIFICATION",
      endpoint: "recaptchaservlet",
    },
    SSP_COMMON_ENDPOINT: {
      name: "SSP_COMMON_ENDPOINT",
      endpoint: "sspCommonEndpoint",
    },
    SSP_API_AUTH: {
      name: "SSP_API_AUTH",
      endpoint: "sspApiAuth",
    },
    SSP_IDLE_SCENARIO: {
      name: "SSP_IDLE_SCENARIO",
      endpoint: "sspIdleScenario",
    },
    SSP_OTP_SCENARIO: {
      name: "SSP_OTP_SCENARIO",
      endpoint: "sspOtpScenario",
    },
    SSP_INVALID_DOCUMENT: {
      name: "SSP_INVALID_DOCUMENT",
      endpoint: "sspInvalidDoc",
    },
    SSP_MULTIPLE_CLICKS: {
      name: "SSP_MULTIPLE_CLICKS",
      endpoint: "sspMultipleClick",
    },
    SSP_PENNYTEST_FAILURE: {
      name: "SSP_PENNYTEST_FAILURE",
      endpoint: "sspPennytestFailure",
    },
    SSP_EIA_ACCOUNT: {
      name: "SSP_EIA_ACCOUNT",
      endpoint: "sspEiaAccount",
    },
    SSP_CALC_QUOTE: {
      name: "SSP_CALC_QUOTE",
      endpoint: "sspCalcQuote",
    },
    SSP_PRODUCT_RECOMMENDATION: {
      name: "SSP_PRODUCT_RECOMMENDATION",
      endpoint: "sspProductRecommendation",
    },
    SSP_SUPPORT_OPTIONS: {
      name: "SSP_SUPPORT_OPTIONS",
      endpoint: "sspSupportOptions",
    },
    SSP_INCOMPLETE_TRANSACTION: {
      name: "SSP_INCOMPLETE_TRANSACTION",
      endpoint: "sspIncompleteTransaction",
    },
    SSP_DIGITAL_SCORECARD: {
      name: "SSP_DIGITAL_SCORECARD",
      endpoint: "sspDigitalScoreCard",
    },
    SSP_NOTIFICATION_DETAILS: {
      name: "SSP_NOTIFICATION_DETAILS",
      endpoint: "sspNotificationCard",
    },
    PROFILE_COMPLETION: {
      name: "PROFILE_COMPLETION",
      endpoint: "profilecompletion",
    },
    LEAD_GENERATE: {
      name: "LEAD_GENERATE",
      endpoint: "leadgenerate",
    },
    ARTICLE_BLOG: {
      name: "ARTICLE_BLOG",
      endpoint: "articleblog"
    },
    ARTICLE_VIDEO: {
        name: "ARTICLE_VIDEO",
        endpoint: "articlevideo"
    },
    PQ_SUBMIT: {
      name: "PQ_SUBMIT",
      endpoint: "pqsubmit"
    },
    GET_PQ_SUTAIBLE_PLANS:{
      name: "GET_PQ_SUTAIBLE_PLANS",
      endpoint: "/api/assets/tataaialifeinsurancecompanylimited/personalityquizplans/"
    },  
    GET_PQ_RESULT:{
      name: "GET_PQ_RESULT",
      endpoint: "/api/assets/tataaialifeinsurancecompanylimited/personalityquickresult/"
    },
    GET_PQ_DISCLAIMER:{
      name: "GET_PQ_DISCLAIMER",
      endpoint: "/api/assets/tataaialifeinsurancecompanylimited/pq-desclaimer/"
    },
    GET_PQ_JSON:{
      name: "GET_PQ_JSON",
      endpoint: "/content/tataaialifeinsurancecompanylimited/api/pq.json"
    },
    CITY_MEET_GET_CALL: {
        name: "CITY_MEET_GET_CALL",
        endpoint: "citymeetadvisorwithoutauth"
    },
    CITY_NAMES : { 
      name : "CITY_NAMES", 
      endpoint : "/api/assets/tataaialifeinsurancecompanylimited/contentfragments/city-mapping-content-fragment" 
    }, 
    COMPANY_NAMES : {
      name : "COMPANY_NAMES",
      endpoint : "/api/assets/tataaialifeinsurancecompanylimited/company-name-fragment/company-name"
    },
    HINDI_TRANSLATOR: {
      name: "HINDI_TRANSLATOR",
      endpoint: "hinditranslator"
    },
    JSON_TO_PDF_CSV : {
      name : "JSON_TO_PDF_CSV",
      endpoint : "jsonToCsvPdf"
    },
    SSP_ACCOUNT_LOCKED: {
      name: "SSP_ACCOUNT_LOCKED",
      endpoint: "sspAccountLocked"
    },
    SSP_AUTOPAY_TRIGGER: {
      name: "SSP_AUTOPAY_TRIGGER",
      endpoint: "sspAutopayTrigger"
    },
    SSP_VIDEO_UPLOAD: {
      name: "SSP_VIDEO_UPLOAD",
      endpoint: "sspVideoUpload"
    },
    SSP_CLICK_ON_BANNERS: {
      name: "SSP_CLICK_ON_BANNERS",
      endpoint: "sspClickOnBanners"
    },
    SSP_TWO_COMMON_NOTIFICATION: {
      name: "SSP_TWO_COMMON_NOTIFICATION",
      endpoint: "sspTwoCommonNotification"
    },
    STATE_MASTER: {
      name : "STATE_NAMES",
      endpoint : "/content/tataaialifeinsurancecompanylimited/api/statemaster"
    },
    INCOME_CALC : {
      name : "INCOME_CALC",
      endpoint : "/api/assets/tataaialifeinsurancecompanylimited/"
    },
    COUNTRY_MASTER: {
      name : "COUNTRY_NAMES",
      endpoint : "/content/tataaialifeinsurancecompanylimited/api/countrymaster"
    },
    PRESS_RELEASE:{
      name:"PRESS_RELEASE",
      endpoint: "/api/assets/tataaialifeinsurancecompanylimited/tata-content-fragment/"
    }, 
    COMPANY_NAMES_HINDI : {
      name : "COMPANY_NAMES_HINDI",
      endpoint : "/api/assets/tataaialifeinsurancecompanylimited/company-name-fragment-hindi/company-name"
    },
    SUITABILITY_CF : {
      name : "SUITABILITY_CF",
      endpoint : "/api/assets/tataaialifeinsurancecompanylimited/"
    },
    LIFE_PLANNER_API : {
      name : "LIFE_PLANNER_API",
      endpoint : "lifeplannerapi"
    },
    ABHA_GET_CERTIFICATE : {
      name : "ABHA_GET_CERTIFICATE",
      endpoint : "abhaGetCertificate"
    },
    ABHA_ADHAR_GENERATE_OTP : {
      name : "ABHA_ADHAR_GENERATE_OTP",
      endpoint : "abhaAdharGenerateOtp"
    },
    ABHA_ADHAR_VERIFY_OTP : {
      name : "ABHA_ADHAR_VERIFY_OTP",
      endpoint : "abhaAdharVerifyOtp"
    },
    ABHA_ADHAR_REGENERATE_OTP : {
      name : "ABHA_ADHAR_REGENERATE_OTP",
      endpoint : "abhaAdharRegenerateOtp"
    },
    ABHA_CHECK_GENRATE_MOBILE : {
      name : "ABHA_VERIFY_MOBILE",
      endpoint : "abhaCheckGenerateMobile"
    },
    ABHA_VERIFY_MOBILE : {
      name : "ABHA_VERIFY_MOBILE",
      endpoint : "abhaVerifyMobile"
    },
    ABHA_CREATE_HEALTHID_WITH_AADHAROTP : {
      name : "ABHA_CREATE_HEALTHID_WITH_AADHAROTP",
      endpoint : "abhaCreateHealthIdWithAadhaarOtp"
    },
    ABHA_CREATE_HEALTHID_SUGGETIONS : {
      name : "CREATE_HEALTHID_SUGGETIONS",
      endpoint : "abhacreateHealthIdSuggetions"
    },
    ABHA_GET_QR_CODE : {
      name : "ABHA_GET_QR_CODE",
      endpoint : "abhaGetQrCode"
    },
    ABHA_UPDATE_PROFILE : {
      name : "ABHA_UPDATE_PROFILE",
      endpoint : "abhaUpdateProfile"
    },
    ABHA_DOWNLOAD_ABHACARD : {
      name : "ABHA_DOWNLOAD_ABHACARD",
      endpoint : "abhadownloadabhacard"
    },
    ABHA_SEARCH_BY_AADHARNO : {
      name : "ABHA_SEARCH_BY_AADHARNO",
      endpoint : "abhaSearchByAadharGenOtp"
    },
    ABHA_SEARCH_AADHAR_OTP_VERIFY : {
      name : "ABHA_SEARCH_AADHAR_OTP_VERIFY",
      endpoint : "abhaSearchAadharVerifyOtp"
    },
    ABHA_AUTH_INIT : {
      name : "ABHA_AUTH_INIT",
      endpoint : "abhaAuthInit"
    },
    ABHA_CONFIRM_WITH_AADHAROTP : {
      name : "ABHA_CONFIRM_WITH_AADHAROTP",
      endpoint : "abhaConfirmWithAadharOtp"
    },
    ABHA_GET_PROFILE : {
      name : "ABHA_GET_PROFILE",
      endpoint : "abhaGetProfile"
    },
    COUNTRY_CODE_VALIDATION: {
      name : "COUNTRY_CODE_VALIDATION",
      endpoint : "/content/tataaialifeinsurancecompanylimited/api/countryValidationCode"
    },
    VALIDATE_WITHOUT_SSO: {
      name: "VALIDATE_WITHOUT_SSO",
      endpoint: "validatewithoutsso"
    },
    PAYMENT_DIGIO: {
      name: "PAYMENT_DIGIO",
      endpoint: "paymentdigio"
    },
    TRANSACTION_START: {
      name: "TRANSACTION_START",
      endpoint: "transactionstart"
    },
    TRANSACTION_END: {
      name: "TRANSACTION_END",
      endpoint: "transactionend"
    },
    ACKNOWLEDGMENT_SUCCESS: {
      name: "ACKNOWLEDGMENT_SUCCESS",
      endpoint: "acknowledgmentsuccess"
    },
    BILLDESK_CREATE: {
      name: "BILLDESK_CREATE",
      endpoint: "billdeskcreate"
    },
    DIGIO_ENQUIRY: {
      name: "DIGIO_ENQUIRY",
      endpoint: "digioenquiry"
    },
    BILLDESK_MANDATE: {
      name: "BILLDESK_MANDATE",
      endpoint: "billdeskmandate"
    },
    LAPSED_FORM: {
      name: "LAPSED_FORM",
      endpoint: "lapsedform"
    },
    PAYMENT_STATUS: {
      name: "PAYMENT_STATUS",
      endpoint: "paymentstatus"
    },
    COUNTRY_MASTER_NRI: {
      name : "COUNTRY_NAMES",
      endpoint : "/content/tataaialifeinsurancecompanylimited/api/countrymasterNri"
    },
    PRODUCT_CHECK_PREMIUM: {
      name : "PRODUCT_CHECK_PREMIUM",
      endpoint : "/content/tataaialifeinsurancecompanylimited/api/productcheckpremium"
    },
    VOIP_API : {
      name : "VOIP_API",
      endpoint : "xmlApi"
    },
    PREMIUM_QUOTATION : {
      name : "PREMIUM_QUOTATION",
      endpoint : "premiumquotation"
    },
    EMPLOYEE_REFERRAL : {
      name : "EMPLOYEE_REFERRAL",
      endpoint : "employeereferralApi"
    },
    PAYMENT_PREFILLAPI : {
      name : "PAYMENT_PREFILLAPI",
      endpoint : "paymentprefillapi"
    },
    EMAIL_SUGGESTION : {
      name : "EMAIL_SUGGESTION",
      endpoint : "https://www.tataaia.com/api/assets/tataaialifeinsurancecompanylimited/email-suggestions/email-suggestion-cf.json
    },
    NUMR_API : {
      name : "NUMR_API",
      endpoint : "https://api2.numr.app/es/v1/workspaces/24/in/projects/22/surveysend"
    },
    UNCLAIMED_AUTHENTICATION : {
      name : "UNCLAIMED_AUTHENTICATION",
      endpoint : "unclaimedauthentication"
    },
    ECM_QUERY_API : {
      name : "ECM_QUERY_API",
      endpoint : "ecmqueryapi"
    },
    FUND_RESUME_NAV : {
      name : "FUND_RESUME_NAV",
      endpoint : "fund-daily-nav-resume"
    },
    FUND_RESUME : {
      name : "FUND_RESUME",
      endpoint : "fund-details-resume"
    },
    GRIEVANCE_REDRESSAL_DATA:{
      name: "GRIEVANCE_REDRESSAL_DATA",
      endpoint: "/api/assets/tataaialifeinsurancecompanylimited/content-fragment-23-02-24/csvtojson/grivess-model"
    },  
    POLICY_SOLD_COUNT : {
      name : "POLICY_SOLD_COUNT",
      endpoint : "policysoldcount"
    },
    SUBH_COMBO : {
      name : "SUBH_COMBO",
      endpoint : "subhcombo"
    },
    GRIEVANCE_GET_CALLBACK : {
      name : "GRIEVANCE_GET_CALLBACK",
      endpoint : "grievancecallbackapi"
    },
    CF_VIEW_COUNT :{
      name :"CF_VIEW_COUNT",
      endpoint :"/api/assets/tataaialifeinsurancecompanylimited/content-fragment-23-02-24/adobe-navigator/homePage.json"
    },
    SMART_PENSION_QUOTATION : {
      name : "SMART_PENSION_QUOTATION",
      endpoint : "smartpensionquotation"
    },
    SUBH_COMBO_QUOTATION : {
      name : "SUBH_COMBO_QUOTATION",
      endpoint : "subhcomboquotation"
    },
    GLOBALCAL_QUOTATION : {
      name : "GLOBALCAL_QUOTATION",
      endpoint : "globalcalquotation"
    },
    SIDDHI_ENCRYPTION :{
      name :"SIDDHI_ENCRYPTION",
      endpoint :"aesutilencryptapi"
    },
    SIDDHI_DECRYPTION :{
      name :"SIDDHI_DECRYPTION",
      endpoint :"aesutildecryptapi"
    },
    SIDDHI_LEAD_API :{
      name :"SIDDHI_LEAD_API",
      endpoint :"siddhiLeadAPI"
    },
    GLOBALCAL_QUOTATION : {
      name : "GLOBALCAL_QUOTATION",
      endpoint : "globalcalquotation"
    },
    SEARCH_API: {
      name: "SEARCH_API",
      endpoint: "websitesearch",
    }
}; 
/*******************************************Product Config Module - Start******************************************************/

(function(_global){
	var _productConfig = (function (jsHelper) {
        if (exceptionUtility) {
            exceptionUtility.dependencyCheck([jsHelper], "App Config");
        }

        /* Product Category Constant Values */
        /* Product Constants */
        var productConstants={};
        
        /* Product Category Constants */
        var productCategoryConstants = {};

        var productCategoryMap = {};
        

        /* Product IDs */
       var productIds = {};
       
       /* Product Config Object to expose */
        var productConfigObj = {};
        Object.keys(productConstants).forEach(function(eachProductConstant){
            var category = getCategoryByProduct(eachProductConstant);
            productConfigObj[eachProductConstant] = jsHelper.freezeObj({
                "name" : productConstants[eachProductConstant],
                "productId" : productIds[eachProductConstant],
                "category" : category,
                "categoryFullName" : jsHelper.toSentence(category)                
            });
        })

        return jsHelper.freezeObj(productConfigObj);
    })(jsHelper);
        
    _global.jsHelper.defineReadOnlyObjProp(_global,'productConfig',_productConfig);
})(this);

/*******************************************Product Config Module - Start******************************************************/
/*******************************************AJAX Utility Module - Start******************************************************/

(function (_global) {
    var _ajaxUtility = (function (jsHelper) {
        var ajaxUtilityObj = {};
        if (exceptionUtility) {
            exceptionUtility.dependencyCheck([jsHelper], "AJAX Utility");
        }

        function postAjax(success, failure, url, data, headers) {

            var xmlhttp = new XMLHttpRequest();   /* new HttpRequest instance */
            xmlhttp.open("POST", url);

            if (headers && jsHelper.isObject(headers)) {
                Object.keys(headers).forEach(function (key) {
                    xmlhttp.setRequestHeader(key, headers[key]);
                });
            }

            xmlhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    if (jsHelper.isFunc(success)) {
                        success(this.responseText);
                    }
                } else if (this.readyState == 4 && this.status != 200) {
                    if (jsHelper.isFunc(failure)) {
                        failure(this.responseText);
                    }
                }
            };
            xmlhttp.onerror = function () {
                if (jsHelper.isFunc(failure)) {
                    failure(this.responseText);
                }
            }

            xmlhttp.send(data);
            return xmlhttp;
        }

        var postJson = function postAjaxJson(url, data) {
            if (!jsHelper.isObj(data)) {
                throw new Error("Request Data not defined!");
            }

            var formData = new FormData();
            formData.append("data", jsHelper.stringifyJson(data));


            if (jsHelper.isDef(getCookie("mcvid"))) {
                var mcvid = getCookie("mcvid");
            } else {
                var mcvid = ''
            }

            try {
                var headers = {
                    "iplocation": mcvid /* _satellite.getVisitorId().getMarketingCloudVisitorID() */
                };

            } catch (error) {
 
                var headers = {

                    "iplocation": ''

                };

            }

            return new Promise(function (resolve, reject) {
                var success = function (response) {
                    resolve(response);
                }
                var failure = function (error) {
                    reject(error);
                }
                postAjax(success, failure, url, formData, headers);
            });
        }
        ajaxUtilityObj.postJson = postJson;

        function getAjax(success, failure, url, data, headers) {
            var xmlhttp = new XMLHttpRequest();   /* new HttpRequest instance */
            xmlhttp.open("GET", url, true);

            if (headers && jsHelper.isObject(headers)) {
                Object.keys(headers).forEach(function (key) {
                    xmlhttp.setRequestHeader(key, headers[key]);
                });
            }

            xmlhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    if (jsHelper.isFunc(success)) {

                        success(this.responseText);
                    }
                } else if (this.readyState == 4 && this.status != 200) {
                    if (jsHelper.isFunc(failure)) {
                        failure(this.responseText);
                    }
                }
            };
            xmlhttp.onerror = function () {
                if (jsHelper.isFunc(failure)) {
                    failure(this.responseText);
                }
            }

            xmlhttp.send(data);
            return xmlhttp;
        }

        var getJson = function getAjaxJson(url, data) {
            if (!jsHelper.isObj(data)) {
                throw new Error("Request Data not defined!");
            }
            if (!jsHelper.isObj(data.headerJson)) {
                data.headerJson = {};
            }
            data.headerJson["Content-Type"] = "application/json";

            var formData = new FormData();
            formData.append("data", jsHelper.stringifyJson(data));


            var headers = {

            };

            return new Promise(function (resolve, reject) {
                var success = function (response) {
                    resolve(response);
                }
                var failure = function (error) {
                    reject(error);
                }
                getAjax(success, failure, url, formData, headers);
            });
        }
        ajaxUtilityObj.getJson = getJson;


        return jsHelper.freezeObj(ajaxUtilityObj);
    })(_global.jsHelper);

    _global.jsHelper.defineReadOnlyObjProp(_global, 'ajaxUtility', _ajaxUtility);
})(this);

/*******************************************AJAX Utility Module - End******************************************************/
(function (_global) {
  var _apiUtility = (function fnApiUtility(
    jsHelper,
    appConfig,
    apiConstants,
    ajaxUtility
  ) {
    if (exceptionUtility) {
      exceptionUtility.dependencyCheck(
        [jsHelper, appConfig, apiConstants, ajaxUtility],
        "API Utility"
      );
    }

    var apiUtilityObj = {};
    var apiExecutionStatus = {};
    var errorObj = {
      responseJson: {},
      errorJson: {
        message: "API Execution going on.",
        code: "1",
      },
    };
    var defaultCallbackErr = {
      errorMessage: "CallBack Error",
    };

    var validateStatus = function (response) {
      if (jsHelper.isStr(response)) {
        response = jsHelper.parseJson(response);
      }
      return response["P_ERROR_MESSAGE"] === "SUCCESS";
    };

    var getResponseJson = function (response) {
      return response["responseJson"];
    };

    var call = function callApi(eachApiConfig, data) {
      var apiUrl =
        appConfig.apiRoot + "/" + eachApiConfig + appConfig.apiExtension;
      return new Promise(function (resolve, reject) {
        ajaxUtility
          .postJson(apiUrl, data)
          .then(function (responseText) {
            resolve(responseText);
          })
          .catch(function (error) {
            reject(error);
          });
      });
    };

    var getcall = function callApi(eachApiConfig, data) {
      var apiUrl =
        appConfig.apiRoot + "/" + eachApiConfig + appConfig.apiExtension;
      return new Promise(function (resolve, reject) {
        ajaxUtility
          .getJson(apiUrl, data)
          .then(function (responseText) {
            resolve(responseText);
          })
          .catch(function (error) {
            reject(error);
          });
      });
    };


    var cfgetcall = function callApi(eachApiConfig, data) {
      var apiUrl = eachApiConfig + appConfig.apiExtension;
      return new Promise(function (resolve, reject) {
        ajaxUtility
          .getJson(apiUrl, data)
          .then(function (responseText) {
            resolve(responseText);
          })
          .catch(function (error) {
            reject(error);
          });
      });
    };

    /******Public Disclosure API call*******/

    var PUBLIC_DISCLOSURE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PUBLIC_DISCLOSURE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PUBLIC_DISCLOSURE = PUBLIC_DISCLOSURE;

    /******OTP Mobile Service*******/

    var OTP_MOBILE_SERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.OTP_MOBILE_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.OTP_MOBILE_SERVICE = OTP_MOBILE_SERVICE;

    var SELF_AUTHENTICATE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SEND_OTP.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SELF_AUTHENTICATE = SELF_AUTHENTICATE;

    var CUST_INFO_SERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.CUST_INFO_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              dataMapping.sspAlphaID =
                responseJson.responseJson.policies[0].alphaID;
              updateDataMapping();
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.CUST_INFO_SERVICE = CUST_INFO_SERVICE;

    var RECIEPT_DOWNLOAD_STATEMENT = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.RECIEPT_DOWNLOAD_STATEMENT.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.RECIEPT_DOWNLOAD_STATEMENT = RECIEPT_DOWNLOAD_STATEMENT;

    var ACCOUNT_HOLDER_STATEMENT_UT = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ACCOUNT_HOLDER_STATEMENT.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ACCOUNT_HOLDER_STATEMENT_UT = ACCOUNT_HOLDER_STATEMENT_UT;

    /******************************************************************************************************************************************/

    var UNIT_STATEMENT_UT = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.UNIT_STATEMENT.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.UNIT_STATEMENT_UT = UNIT_STATEMENT_UT;

    /******************************************************************************************************************************************/

    var POLICY_DOC_DOWNLOAD_UT = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.POLICY_DOC_DOWNLOAD.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.POLICY_DOC_DOWNLOAD_UT = POLICY_DOC_DOWNLOAD_UT;

    /******************************************************************************************************************************************/

    var PREMIUM_RECEIPT_CERTIFICATE_UT = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PREMIUM_RECEIPT_CERTIFICATE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PREMIUM_RECEIPT_CERTIFICATE_UT =
      PREMIUM_RECEIPT_CERTIFICATE_UT;

    /******************************************************************************************************************************************/

    var PREMIUM_CERTIFICATE_UT = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PREMIUM_CERTIFICATE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PREMIUM_CERTIFICATE_UT = PREMIUM_CERTIFICATE_UT;

    /******************************************************************************************************************************************/
    var GET_HISTORIC_STATEMENT_UT = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.GET_HISTORIC_STATEMENT.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.GET_HISTORIC_STATEMENT_UT = GET_HISTORIC_STATEMENT_UT;

    /******************************************************************************************************************************************/

    var SAPLINGS_PLANTED_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        getcall(apiConstants.SAPLINGS_PLANTED_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SAPLINGS_PLANTED_SERVICE_CALL = SAPLINGS_PLANTED_SERVICE_CALL;

    /****** Service*******/

    var POLICIES_SOLD_IN_MONTH_CALL = function (data) {
      return jsHelper.isFalse(apiExecutionStatus.POLICIES_SOLD_IN_MONTH_CALL)
        ? new Promise(function (resolve, reject) {
          apiExecutionStatus.POLICIES_SOLD_IN_MONTH_CALL = true;
          call(apiConstants.POLICIES_SOLD_IN_MONTH.endpoint, data)
            .then(function (response) {
              if (jsHelper.isStr(response)) {
                response = jsHelper.parseJson(response);
              }
              var responseJson = response;

              if (jsHelper.isObj(responseJson)) {
                resolve(response);
              } else {
                reject(response);
              }
              apiExecutionStatus.POLICIES_SOLD_IN_MONTH_CALL = false;
            })
            .catch(function (err) {
              reject(
                jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err
              );
              apiExecutionStatus.POLICIES_SOLD_IN_MONTH_CALL = false;
            });
        })
        : new Promise(function (resolve, reject) {
          reject(errorObj);
        });
    };
    apiUtilityObj.POLICIES_SOLD_IN_MONTH_CALL = POLICIES_SOLD_IN_MONTH_CALL;
    apiExecutionStatus.POLICIES_SOLD_IN_MONTH_CALL = false;

    /****** write to us*******/
    var WRITE_TO_US = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.WRITE_TO_US.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.WRITE_TO_US = WRITE_TO_US;

    /****** write to us*******/
    /****** Request To Call Back*******/

    var REQUEST_TO_CALL_BACK = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.REQUEST_TO_CALL_BACK.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.REQUEST_TO_CALL_BACK = REQUEST_TO_CALL_BACK;

    /****** Request To Call Back*******/

    /****** Service*******/

    var TRACK_INDIVIDUAL_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.TRACK_INDIVIDUAL_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.TRACK_INDIVIDUAL_SERVICE_CALL = TRACK_INDIVIDUAL_SERVICE_CALL;

    /****** Service*******/

    var TRACK_GROUP_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.TRACK_GROUP_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.TRACK_GROUP_SERVICE_CALL = TRACK_GROUP_SERVICE_CALL;

    /****** Service*******/

    var PAN_UPDATE_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PAN_UPDATE_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PAN_UPDATE_SERVICE_CALL = PAN_UPDATE_SERVICE_CALL;

    /****** Service*******/

    var EMAIL_UPDATE_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.EMAIL_UPDATE_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.EMAIL_UPDATE_SERVICE_CALL = EMAIL_UPDATE_SERVICE_CALL;

    /****** Service*******/

    var MOBILE_UPDATE_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.MOBILE_UPDATE_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.MOBILE_UPDATE_SERVICE_CALL = MOBILE_UPDATE_SERVICE_CALL;

    /****** Service*******/

    var TRIGGER_OTP_EMAILSERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.TRIGGER_OTP_EMAILSERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.TRIGGER_OTP_EMAILSERVICE_CALL = TRIGGER_OTP_EMAILSERVICE_CALL;

    /****** Service*******/

    var TRIGGER_OTP_MOBILESERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.TRIGGER_OTP_MOBILESERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.TRIGGER_OTP_MOBILESERVICE_CALL =
      TRIGGER_OTP_MOBILESERVICE_CALL;

    /****** Service*******/

    var VALIDATE_OTP_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.VALIDATE_OTP_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.VALIDATE_OTP_SERVICE_CALL = VALIDATE_OTP_SERVICE_CALL;

    /******************************************************************************************************************************************/
    var SELF_AUTHENTICATE_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SELF_AUTHENTICATE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SELF_AUTHENTICATE_SERVICE_CALL =
      SELF_AUTHENTICATE_SERVICE_CALL;

    /****** Service*******/

    var UNCLAIMED_INVIVIDUAL_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.UNCLAIMED_INDIVIDUAL_FUND.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.UNCLAIMED_INVIVIDUAL_SERVICE_CALL =
      UNCLAIMED_INVIVIDUAL_SERVICE_CALL;

    /****** CREATE_LEAD_CALL *******/

    var UNCLAIMED_INDIVIDUAL_DATA = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.UNCLAIMED_DATA_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.UNCLAIMED_INDIVIDUAL_DATA = UNCLAIMED_INDIVIDUAL_DATA;

    /****** CREATE_LEAD_CALL *******/

    /****** CREATE_LEAD_CALL *******/

    var CREATE_LEAD_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.CREATE_LEAD.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.CREATE_LEAD_CALL = CREATE_LEAD_CALL;

    /****** NEFTY_PENNY_CALL *******/

    var NEFTY_PENNY_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.NEFTY_PENNY.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.NEFTY_PENNY_CALL = NEFTY_PENNY_CALL;

    /****** IFSC_CODE_CHECK *******/

    var IFSC_CODE_CHECK = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.IFSC_CODE_CHECK.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.IFSC_CODE_CHECK = IFSC_CODE_CHECK;

    /****** INSTA_API_CALL *******/

    var INSTA_API_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.INSTA_API.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.INSTA_API_CALL = INSTA_API_CALL;

    /****** PAN_NO_VALIDATION_CALL *******/

    var PAN_NO_VALIDATION_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PAN_NO_VALIDATION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PAN_NO_VALIDATION_CALL = PAN_NO_VALIDATION_CALL;

    /****** CUST_VALIDATION_SERVICE_CALL *******/

    var CUST_VALIDATION_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.CUST_VALIDATION_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.CUST_VALIDATION_SERVICE_CALL = CUST_VALIDATION_SERVICE_CALL;

    /****** OTP_MOBILE_EMAIL_SERVICE_CALL *******/

    var OTP_MOBILE_EMAIL_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.OTP_MOBILE_EMAIL_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.OTP_MOBILE_EMAIL_SERVICE_CALL = OTP_MOBILE_EMAIL_SERVICE_CALL;

    /****** OTP_EMAIL_SERVICE_CALL *******/

    var OTP_EMAIL_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.OTP_EMAIL_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.OTP_EMAIL_SERVICE_CALL = OTP_EMAIL_SERVICE_CALL;

    /****** FUNDS_DEATILS_SERVICE_CALL *******/

    var FUNDS_DEATILS_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.FUNDS_DEATILS_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.FUNDS_DEATILS_SERVICE_CALL = FUNDS_DEATILS_SERVICE_CALL;

    /******************************************************************************************************************************************/

    var EMAIL_UPDATE_GEN_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.EMAIL_UPDATE_GEN_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.EMAIL_UPDATE_GEN_SERVICE_CALL = EMAIL_UPDATE_GEN_SERVICE_CALL;

    /******************************************************************************************************************************************/

    var VALIDATE_EMAIL_UPDATE_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.VALIDATE_EMAIL_UPDATE_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.VALIDATE_EMAIL_UPDATE_SERVICE_CALL =
      VALIDATE_EMAIL_UPDATE_SERVICE_CALL;

    /******************************************************************************************************************************************/

    var EMAIL_SMS_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.EMAIL_SMS_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.EMAIL_SMS_SERVICE_CALL = EMAIL_SMS_SERVICE_CALL;

    /****** NEFT_UPDATE *******/

    var NEFT_UPDATE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.NEFT_UPDATE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.NEFT_UPDATE = NEFT_UPDATE;

    /******Request Tracking Service*******/

    var REQUEST_TRACKING_SERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.REQUEST_TRACKING_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.REQUEST_TRACKING_SERVICE = REQUEST_TRACKING_SERVICE;
    
    /************************Reinvest eligibiloity**********************************************************************************/

    var REINVEST_ELIGIBILITY = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.REINVEST_ELIGIBILITY.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.REINVEST_ELIGIBILITY = REINVEST_ELIGIBILITY;

    /****** Service*******/

    var BILL_DESK = function (data) {
      return jsHelper.isFalse(apiExecutionStatus.BILL_DESK)
        ? new Promise(function (resolve, reject) {
          apiExecutionStatus.BILL_DESK = true;
          call(apiConstants.BILL_DESK.endpoint, data)
            .then(function (response) {
              if (jsHelper.isStr(response)) {
                response = jsHelper.parseJson(response);
              }
              var responseJson = response;

              if (jsHelper.isObj(responseJson)) {
                resolve(response);
              } else {
                reject(response);
              }
              apiExecutionStatus.BILL_DESK = false;
            })
            .catch(function (err) {
              reject(
                jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err
              );
              apiExecutionStatus.BILL_DESK = false;
            });
        })
        : new Promise(function (resolve, reject) {
          reject(errorObj);
        });
    };
    apiUtilityObj.BILL_DESK = BILL_DESK;
    apiExecutionStatus.BILL_DESK = false;

    var splitPaymentCall = function callToSplitPayment(data) {
      return jsHelper.isFalse(apiExecutionStatus.splitPaymentCall)
        ? new Promise(function (resolve, reject) {
          apiExecutionStatus.splitPaymentCall = true;
          call(apiConstants.SPLIT_PAYMENT.endpoint, data)
            .then(function (response) {
              if (jsHelper.isStr(response)) {
                response = jsHelper.parseJson(response);
              }
              var responseJson = response;
              if (jsHelper.isObj(responseJson)) {
                resolve(response);
              } else {
                reject(response);
              }
              apiExecutionStatus.splitPaymentCall = false;
            })
            .catch(function (err) {
              reject(
                jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err
              );
              apiExecutionStatus.splitPaymentCall = false;
            });
        })
        : new Promise(function (resolve, reject) {
          reject(errorObj);
        });
    };
    apiUtilityObj.splitPaymentCall = splitPaymentCall;
    apiExecutionStatus.splitPaymentCall = false;

    /******Request Agent advisor Service*******/

    var AGENT_ADVISOR = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.AGENT_ADVISOR.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.AGENT_ADVISOR = AGENT_ADVISOR;

    /******************************************************************************************************************************************/

    var callToPayU = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PAY_U.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.callToPayU = callToPayU;
    
    /******Request WHATSAPPOTPFORM*******/

    var WHATSAPPOTPFORM = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.WHATSAPPOTPFORM.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.WHATSAPPOTPFORM = WHATSAPPOTPFORM;

    /******Request SHOWCATEGORY*******/

    var SHOWCATEGORY = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SHOWCATEGORY.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SHOWCATEGORY = SHOWCATEGORY;

    /******Request SHOWSUBCATEGORY *******/

    var SHOWSUBCATEGORY = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SHOWSUBCATEGORY.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SHOWSUBCATEGORY = SHOWSUBCATEGORY;

    /******************************************************************************************************************************************/

    var getGroupPolicy = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.GROUP_POLICY.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.getGroupPolicy = getGroupPolicy;

    /******************************************************************************************************************************************/

    var getUnclaimedGroupPolicy = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.UNCLAIMED_GROUP_POLICY.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.getUnclaimedGroupPolicy = getUnclaimedGroupPolicy;

    /******************************************************************************************************************************************/

    var EIASERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.EIASERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.EIASERVICE = EIASERVICE;
    /******************************************************************************************************************************************/

    var SERVICE_REQUEST_INTIMATION_SERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SERVICE_REQUEST_INTIMATION_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SERVICE_REQUEST_INTIMATION_SERVICE =
      SERVICE_REQUEST_INTIMATION_SERVICE;

    /******************************************************************************************************************************************/

    var callToBilldesk = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.BUILDESK.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.callToBilldesk = callToBilldesk;

    var callToFss = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.FSS.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.callToFss = callToFss;

    var getPaymentIdDetails = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PAYMENT_DETAILS.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.getPaymentIdDetails = getPaymentIdDetails;

    var callToUPI = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.INDUSIND.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.callToUPI = callToUPI;

    var getpaymentGatewayStartTransaction = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.INDUSIND.endpoint, data) /* TODO : Need to change */
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.getpaymentGatewayStartTransaction =
      getpaymentGatewayStartTransaction;

    var getDigioCreateForm = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.DIGIO_CREATE_FORM.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.getDigioCreateForm = getDigioCreateForm;

    /** CUSTOMER_GREVIANCE_SERVICE_CALL Starts */
    var CUSTOMER_GREVIANCE_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.CUSTOMER_GREVIANCE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.CUSTOMER_GREVIANCE_SERVICE_CALL =
      CUSTOMER_GREVIANCE_SERVICE_CALL;
    /** CUSTOMER_GREVIANCE_SERVICE_CALL Ends */

    /** SHOWUNSUCCESSCOUNT_SERVICE_CALL start */

    var getshowUnsuccessCount = function callToSwitchFundNavDetails(data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SHOWUNSUCCESSCOUNT.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.getshowUnsuccessCount = getshowUnsuccessCount;

    /** SHOWUNSUCCESSCOUNT_SERVICE_CALL Ends */

    /** getfundSwitchNavDate start */

    var getfundSwitchNavDate = function callToSwitchFundNavDetails(data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.FUNDSWITCHNAVDATE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.getfundSwitchNavDate = getfundSwitchNavDate;

    /** getfundSwitchNavDate Ends */

    /** getFundSwitchRequestAudit start */

    var getFundSwitchRequestAudit = function callToSwitchFundNavDetails(data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.FUNDSWITCH_REQUEST_AUDIT.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.getFundSwitchRequestAudit = getFundSwitchRequestAudit;

    /** getFundSwitchRequestAudit Ends */

    var getSwitchFundNavDetails = function callToSwitchFundNavDetails(data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SWITCH_FUNDS_NAV_DETAILS.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.getSwitchFundNavDetails = getSwitchFundNavDetails;

    var switchFundDetailsServiceCall = function callToSwitchFundDetailsService(
      data
    ) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SWITCH_FUND_DETAILS_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.switchFundDetailsServiceCall = switchFundDetailsServiceCall;

    var switchFundRequestServiceCall = function callToswitchFundRequestService(
      data
    ) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SWITCH_FUND_REQUEST_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.switchFundRequestServiceCall = switchFundRequestServiceCall;

    var JIO_MONEY = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.JIO_MONEY.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;
            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.JIO_MONEY = JIO_MONEY;

    /** YOUNG PIONEER SAVE Starts */
    var YOUNG_PIONEER_SAVE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.YOUNG_PIONEER_SAVE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.YOUNG_PIONEER_SAVE_CALL = YOUNG_PIONEER_SAVE_CALL;
    /** YOUNG PIONEER SAVE Ends */

    /** YOUNG PIONEER READ Starts */
    var YOUNG_PIONEER_READ_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.YOUNG_PIONEER_READ.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.YOUNG_PIONEER_READ_CALL = YOUNG_PIONEER_READ_CALL;
    /** YOUNG PIONEER READ Ends */
    /** RECRUITMENT Starts */
    var RECRUITMENT_SERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.RECRUITMENT_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.RECRUITMENT_SERVICE = RECRUITMENT_SERVICE;
    /** KISHT_FASTBANKING Starts */
    var KISHT_FASTBANKING = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.KISHT_FASTBANKING.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.KISHT_FASTBANKING = KISHT_FASTBANKING;
    /** KISHT_FASTBANKING Ends */

    /** UPLOAD_DOC_CRM Starts */
    var UPLOAD_DOC_CRM = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.UPLOAD_DOC_CRM.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.UPLOAD_DOC_CRM = UPLOAD_DOC_CRM;

    /** UPLOAD_DOC_CRM Ends */

    /** PAYMEMT_GATEWAY_START_TRANSACTION Starts */
    var PAYMEMT_GATEWAY_START_TRANSACTION = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PAYMEMT_GATEWAY_START_TRANSACTION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PAYMEMT_GATEWAY_START_TRANSACTION =
      PAYMEMT_GATEWAY_START_TRANSACTION;

    /** PAYMEMT_GATEWAY_POST_TRANSACTION Starts */
    var PAYMEMT_GATEWAY_POST_TRANSACTION = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PAYMEMT_GATEWAY_POST_TRANSACTION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PAYMEMT_GATEWAY_POST_TRANSACTION =
      PAYMEMT_GATEWAY_POST_TRANSACTION;

    /******Request SHOWGRIEVANCECATEGORY *******/

    var SHOWGRIEVANCECATEGORY = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SHOWGRIEVANCECATEGORY.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SHOWGRIEVANCECATEGORY = SHOWGRIEVANCECATEGORY;

    /******Request GRIEVANCESUBCATEGORY *******/

    var GRIEVANCESUBCATEGORY = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.GRIEVANCESUBCATEGORY.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.GRIEVANCESUBCATEGORY = GRIEVANCESUBCATEGORY;

    /** UNCLAIMED_LIFE_POLICY_INFOSERVICE Starts */

    var unclaimedLifePolicyInfoService = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.UNCLAIMED_LIFE_POLICY_INFOSERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.unclaimedLifePolicyInfoService =
      unclaimedLifePolicyInfoService;

    var getGroupPolicyEmployerData = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.UNCLAIME_GROUP_POLICY_EMPLOYER.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.getGroupPolicyEmployerData = getGroupPolicyEmployerData;

    /* SEND_OTP */
    /** TERM_CALCULATOR Starts */
    var TERM_CALCULATOR = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.TERM_CALCULATOR.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.TERM_CALCULATOR = TERM_CALCULATOR;
    /** TERM_CALCULATOR Ends */
    /** SAVING_CALCULATOR Starts */
    var SAVING_CALCULATOR = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SAVING_CALCULATOR.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SAVING_CALCULATOR = SAVING_CALCULATOR;
    /** SAVING_CALCULATOR Ends */
    /** PAYOUT_DETAIL_SERVICE Starts */
    var PAYOUT_DETAIL_SERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PAYOUT_DETAIL_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PAYOUT_DETAIL_SERVICE = PAYOUT_DETAIL_SERVICE;
    /* PAYOUT_DETAIL_SERVICE Ends */

    /** MEET_ADVISOR_CITY Starts */
    var MEET_ADVISOR_CITY = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.CITY_MEET_ADVISOR.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.MEET_ADVISOR_CITY = MEET_ADVISOR_CITY;
    /** MEET_ADVISOR_CITY Ends */

    /** SEARCH_IFSCCODE_BANKNAME Start */
    var SEARCH_IFSCCODE_BANKNAME = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SEARCH_IFSCCODE_BANKNAME.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SEARCH_IFSCCODE_BANKNAME = SEARCH_IFSCCODE_BANKNAME;
    /** SEARCH_IFSCCODE_BANKNAME Ends */

    /** RETIREMENT_CALCULATOR Starts */
    var RETIREMENT_CALCULATOR = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.RETIREMENT_CALCULATOR.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.RETIREMENT_CALCULATOR = RETIREMENT_CALCULATOR;
    /** RETIREMENT_CALCULATOR Ends */
    /** ULIP_CALCULATOR Starts */
    var ULIP_CALCULATOR = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ULIP_CALCULATOR.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ULIP_CALCULATOR = ULIP_CALCULATOR;
    /** ULIP_CALCULATOR Ends */

    /** CIBIL_CALCULATOR Starts */
    var CIBIL_CALCULATOR = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.CIBIL_CALCULATOR.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.CIBIL_CALCULATOR = CIBIL_CALCULATOR;
    /** CIBIL_CALCULATOR Ends */

    /** SHOWNACH AUTOPAY SERVICE Starts */
    var SHOWNACHAUTOPAYSERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SHOWNACHAUTOPAYSERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SHOWNACHAUTOPAYSERVICE = SHOWNACHAUTOPAYSERVICE;
    /** SHOWNACH AUTOPAY SERVICE Ends */

    /** SAVENACHDETAILS SERVICE Starts */
    var SAVENACHDETAILS = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SAVENACHDETAILS.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SAVENACHDETAILS = SAVENACHDETAILS;
    /** SAVENACHDETAILS SERVICE Ends */

    var getMapAuthToken = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.MAP_AUTH_TOKEN.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.getMapAuthToken = getMapAuthToken;

    var getCityByLatLong = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.GET_CITY_BY_LAT_LONG.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.getCityByLatLong = getCityByLatLong;

    var getGeoCodes = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.GEOCODE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.getGeoCodes = getGeoCodes;

    var getPlaceDetails = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PLACE_DETAILS.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.getPlaceDetails = getPlaceDetails;

    var Call_REGISTER_CLAIM = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.REGISTER_CLAIM.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.Call_REGISTER_CLAIM = Call_REGISTER_CLAIM;

    var LOGIN_TOKEN = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.LOGIN_TOKEN.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.LOGIN_TOKEN = LOGIN_TOKEN;

    /* EMAIL Service trigger */
    var EMAIL_SERVICE_API = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.EMAIL_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.EMAIL_SERVICE_API = EMAIL_SERVICE_API;

    /* EMAIL Service trigger */
    var EMAIL_SERVICE_API = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.EMAIL_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.EMAIL_SERVICE_API = EMAIL_SERVICE_API;

    /* RESEND OTP Service trigger */
    var RESEND_OTP_API = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.RESEND_OTP.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.RESEND_OTP_API = RESEND_OTP_API;

    /* SOLR GLOBAL SERACH */
    var GLOBAL_SERACH_SOLR_API = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.GLOBAL_SERACH_SOLR.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.GLOBAL_SERACH_SOLR_API = GLOBAL_SERACH_SOLR_API;

    /****** Service*******/

    var TRIGGER_OTP_CALSERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.TRIGGER_OTP_CALSERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.TRIGGER_OTP_CALSERVICE = TRIGGER_OTP_CALSERVICE;

    /****** REGENERATE_OTP_NONEXISTING_CUSTOMER_SERVICE Service*******/

    var REGENERATE_OTP_NONEXISTING_CUSTOMER_SERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(
          apiConstants.REGENERATE_OTP_NONEXISTING_CUSTOMER_SERVICE.endpoint,
          data
        )
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.REGENERATE_OTP_NONEXISTING_CUSTOMER_SERVICE =
      REGENERATE_OTP_NONEXISTING_CUSTOMER_SERVICE;

    /****** Service*******/

    var VALIDAT_OTP_CALSERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.VALIDAT_OTP_CALSERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.VALIDAT_OTP_CALSERVICE = VALIDAT_OTP_CALSERVICE;

    /* SOLR GLOBAL SERACH */
    var IP_ADDRESS_API = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.IP_ADDRESS.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.IP_ADDRESS_API = IP_ADDRESS_API;

    /* PRACTO */
    var PRACTO_API = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PRACTO.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PRACTO_API = PRACTO_API;

    /* NAVINVESTMENTRATINGPROFILE */
    var NAVINVESTMENTRATINGPROFILE_API = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.NAVINVESTMENTRATINGPROFILE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.NAVINVESTMENTRATINGPROFILE_API =
      NAVINVESTMENTRATINGPROFILE_API;

    /* FUNDOBJECTDETAILSSERVICE */
    var FUNDOBJECTDETAILSSERVICE_API = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.FUNDOBJECTDETAILSSERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.FUNDOBJECTDETAILSSERVICE_API = FUNDOBJECTDETAILSSERVICE_API;

    /* validateNeftPennyService api start */
    var validateNeftPennyService_api = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.VALIDATENEFTPENNYSERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.validateNeftPennyService_api = validateNeftPennyService_api;

    /* validateNeftPennyService api end */

    /** FUNDSWITCHNAVDATE Starts */
    var FUNDSWITCHNAVDATE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.FUNDSWITCHNAVDATE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.FUNDSWITCHNAVDATE = FUNDSWITCHNAVDATE;
    /** FUNDSWITCHNAVDATE Ends */

    /** SHOWPREMIUMRECEIPTMONTHS Starts */
    var SHOWPREMIUMRECEIPTMONTHS = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SHOWPREMIUMRECEIPTMONTHS.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SHOWPREMIUMRECEIPTMONTHS = SHOWPREMIUMRECEIPTMONTHS;
    /** SHOWPREMIUMRECEIPTMONTHS Ends */

    /** PREMIUMRECEIPTDOWNLOAD Starts */
    var PREMIUMRECEIPTDOWNLOAD = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PREMIUMRECEIPTDOWNLOAD.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PREMIUMRECEIPTDOWNLOAD = PREMIUMRECEIPTDOWNLOAD;
    /** PREMIUMRECEIPTDOWNLOAD Ends */

    /** VALIDATEFUNDSWITCH Starts */
    var VALIDATEFUNDSWITCH = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.VALIDATEFUNDSWITCH.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.VALIDATEFUNDSWITCH = VALIDATEFUNDSWITCH;
    /** VALIDATEFUNDSWITCH Ends */

    /* SHOWMASTERFUNDSERVICE */
    var SHOWMASTERFUNDSERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SHOWMASTERFUNDSERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SHOWMASTERFUNDSERVICE = SHOWMASTERFUNDSERVICE;

    /* PRACTO REGISTTARTION */
    var PRACTOREGISTRATIONSERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PRACTO_REGISTRATION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PRACTOREGISTRATIONSERVICE = PRACTOREGISTRATIONSERVICE;
    /* PRACTO SUBSCRIPTION */
    var PRACTOSUBSCRIPTIONSERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PRACTO_SUBSCRIPTION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PRACTOSUBSCRIPTIONSERVICE = PRACTOSUBSCRIPTIONSERVICE;

    /******GET ACKNOWLEDGEMENT SERVICE API call*******/

    var GET_ACKNOWLEDGMENT_DETAILS = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.GET_ACKNOWLEDGMENT_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.GET_ACKNOWLEDGMENT_DETAILS = GET_ACKNOWLEDGMENT_DETAILS;

    var TRIGGER_OTP_CALSERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.TRIGGER_OTP_CALSERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.TRIGGER_OTP_CALSERVICE = TRIGGER_OTP_CALSERVICE;

    var VALIDAT_OTP_CALSERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.VALIDAT_OTP_CALSERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.VALIDAT_OTP_CALSERVICE = VALIDAT_OTP_CALSERVICE;

    var ULIP_CALSERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ULIP_CALSERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ULIP_CALSERVICE = ULIP_CALSERVICE;

    /******GET VALIDATE POLICY REVIVAL SERVICE API call*******/
    /* Might have to remove
     var VALIDATE_POLICY_REVIVAL_API = function (data) {
     Might have to remove */

    var ULIP_MASTER_MULTIPLIER = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ULIP_MASTER_MULTIPLIER.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ULIP_MASTER_MULTIPLIER = ULIP_MASTER_MULTIPLIER;

    var LEADER_SERVICE_API = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.LEADER_API.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.LEADER_SERVICE_API = LEADER_SERVICE_API;

    /*********************SENT_CONSENT_SERVICE *****************/
    var SENT_CONSENT_SERVICE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SENT_CONSENT_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SENT_CONSENT_SERVICE = SENT_CONSENT_SERVICE;

    /****** policyRevivalQuestionsService*******/

    var policyRevivalQuestionsService = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.POLICY_REVIVALQUESTIONS_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.policyRevivalQuestionsService = policyRevivalQuestionsService;

    /****** policyRevivalQuestionsService*******/

    /********************* OFFER_MASTER_SERVICE_CALL *****************/
    var OFFER_MASTER_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.OFFER_MASTER_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.OFFER_MASTER_SERVICE_CALL = OFFER_MASTER_SERVICE_CALL;

    /*********************TRACK_SR *****************/
    var TRACK_SR = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.TRACK_SR.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.TRACK_SR = TRACK_SR;

    /****** REDIRECTION_ACCESS_TOKEN_CALL *******/

    var REDIRECTION_ACCESS_TOKEN_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.REDIRECTION_ACCESS_TOKEN.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.REDIRECTION_ACCESS_TOKEN_CALL = REDIRECTION_ACCESS_TOKEN_CALL;

    /****** REDIRECTION_ACCESS_TOKEN_CALL *******/

    /****** FETCH_CUSTOMER_CALL *******/

    var FETCH_CUSTOMER_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.FETCH_CUSTOMER.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.FETCH_CUSTOMER_CALL = FETCH_CUSTOMER_CALL;

    /****** FETCH_CUSTOMER_CALL *******/

    /********************* GET_REPORT_LIST_CALL *****************/
    var GET_REPORT_LIST_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.GET_REPORT_LIST.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.GET_REPORT_LIST_CALL = GET_REPORT_LIST_CALL;

    /*********************MIS SHOW_DATA *****************/
    var SHOW_DATA_MIS = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SHOW_DATA.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SHOW_DATA_MIS = SHOW_DATA_MIS;

    /****** TOKEN_REGENERATE API call*******/

    var TOKEN_REGENERATE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.TOKEN_REGENERATE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.TOKEN_REGENERATE = TOKEN_REGENERATE;

    /****** TOKEN_REGENERATE API call*******/

    /****** SELF_AUTHENTICATE_CLAIM_CALL *******/

    var SELF_AUTHENTICATE_CLAIM_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SELF_AUTHENTICATE_CLAIM.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SELF_AUTHENTICATE_CLAIM_CALL = SELF_AUTHENTICATE_CLAIM_CALL;

    /****** SELF_AUTHENTICATE_CLAIM_CALL *******/

    /****** VALIDATE_OTP_CLAIM_CALL *******/

    var VALIDATE_OTP_CLAIM_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.VALIDATE_OTP_CLAIM.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.VALIDATE_OTP_CLAIM_CALL = VALIDATE_OTP_CLAIM_CALL;

    /****** VALIDATE_OTP_CLAIM_CALL *******/

    /*********************GET FUND LIST *****************/
    var FUND_LIST = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.FUND_LIST.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.FUND_LIST = FUND_LIST;

    /*********************GET FUND LIST *****************/

    /****** SUBMIT_CLAIM_CALL *******/

    var SUBMIT_CLAIM_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SUBMIT_CLAIM.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SUBMIT_CLAIM_CALL = SUBMIT_CLAIM_CALL;

    /****** SUBMIT_CLAIM_CALL *******/

    /****** VYMO_OBJECTS_CALL *******/

    var VYMO_OBJECTS = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.VYMO_OBJECTS.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.VYMO_OBJECTS = VYMO_OBJECTS;
    /****** VYMO_OBJECTS_CALL *******/

    /*********************GET FUND DETAILS *****************/
    var FUND_DETAILS = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.FUND_DETAILS.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.FUND_DETAILS = FUND_DETAILS;

    /*********************GET FUND DETAILS *****************/

    /*********************ADD_CONSENT_DET_CALL start *****************/
    var ADD_CONSENT_DET_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ADD_CONSENT_DET.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.ADD_CONSENT_DET_CALL = ADD_CONSENT_DET_CALL;

    /*********************ADD_CONSENT_DET_CALL ends *****************/

    /*********************WEBSITETO_BOREDIRECTION start *****************/
    var WEBSITETO_BOREDIRECTION_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.WEBSITETO_BOREDIRECTION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.WEBSITETO_BOREDIRECTION_CALL = WEBSITETO_BOREDIRECTION_CALL;

    /*********************WEBSITETO_BOREDIRECTION ends *****************/

    /*********************RECAPTCHA_VERIFICATION start *****************/
    var RECAPTCHA_VERIFICATION_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.RECAPTCHA_VERIFICATION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.RECAPTCHA_VERIFICATION_CALL = RECAPTCHA_VERIFICATION_CALL;

    /*********************RECAPTCHA_VERIFICATION ends *****************/

    /*********************SSP_COMMON_ENDPOINT start *****************/

    var SSP_COMMON_ENDPOINT = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_COMMON_ENDPOINT.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_COMMON_ENDPOINT = SSP_COMMON_ENDPOINT;

    /*********************SSP_COMMON_ENDPOINT ends *****************/

    /*********************SSP_API_AUTH start *****************/

    var SSP_API_AUTH = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_API_AUTH.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_API_AUTH = SSP_API_AUTH;

    /*********************SSP_API_AUTH ends *****************/

    /*********************SSP_IDLE_SCENARIO start *****************/

    var SSP_IDLE_SCENARIO = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_IDLE_SCENARIO.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_IDLE_SCENARIO = SSP_IDLE_SCENARIO;

    /*********************SSP_IDLE_SCENARIO ends *****************/
    /*********************SSP_OTP_SCENARIO start *****************/

    var SSP_OTP_SCENARIO = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_OTP_SCENARIO.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_OTP_SCENARIO = SSP_OTP_SCENARIO;

    /*********************SSP_OTP_SCENARIO ends *****************/
    /*********************SSP_INVALID_DOCUMENT start *****************/

    var SSP_INVALID_DOCUMENT = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_INVALID_DOCUMENT.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_INVALID_DOCUMENT = SSP_INVALID_DOCUMENT;

    /*********************SSP_INVALID_DOCUMENT ends *****************/
    /*********************SSP_MULTIPLE_CLICKS start *****************/

    var SSP_MULTIPLE_CLICKS = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_MULTIPLE_CLICKS.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_MULTIPLE_CLICKS = SSP_MULTIPLE_CLICKS;

    /*********************SSP_MULTIPLE_CLICKS ends *****************/
    /*********************SSP_PENNYTEST_FAILURE start *****************/

    var SSP_PENNYTEST_FAILURE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_PENNYTEST_FAILURE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_PENNYTEST_FAILURE = SSP_PENNYTEST_FAILURE;

    /*********************SSP_PENNYTEST_FAILURE ends *****************/
    /*********************SSP_EIA_ACCOUNT start *****************/

    var SSP_EIA_ACCOUNT = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_EIA_ACCOUNT.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_EIA_ACCOUNT = SSP_EIA_ACCOUNT;

    /*********************SSP_EIA_ACCOUNT ends *****************/
    /*********************SSP_CALC_QUOTE start *****************/

    var SSP_CALC_QUOTE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_CALC_QUOTE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_CALC_QUOTE = SSP_CALC_QUOTE;

    /*********************SSP_CALC_QUOTE ends *****************/
    /*********************SSP_PRODUCT_RECOMMENDATION start *****************/

    var SSP_PRODUCT_RECOMMENDATION = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_PRODUCT_RECOMMENDATION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_PRODUCT_RECOMMENDATION = SSP_PRODUCT_RECOMMENDATION;

    /*********************SSP_PRODUCT_RECOMMENDATION ends *****************/
    /*********************SSP_SUPPORT_OPTIONS start *****************/

    var SSP_SUPPORT_OPTIONS = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_SUPPORT_OPTIONS.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_SUPPORT_OPTIONS = SSP_SUPPORT_OPTIONS;

    /*********************SSP_SUPPORT_OPTIONS ends *****************/
    /*********************SSP_INCOMPLETE_TRANSACTION start *****************/

    var SSP_INCOMPLETE_TRANSACTION = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_INCOMPLETE_TRANSACTION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_INCOMPLETE_TRANSACTION = SSP_INCOMPLETE_TRANSACTION;

    /*********************SSP_INCOMPLETE_TRANSACTION ends *****************/
    /*********************SSP_DIGITAL_SCORECARD start *****************/

    var SSP_DIGITAL_SCORECARD = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_DIGITAL_SCORECARD.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_DIGITAL_SCORECARD = SSP_DIGITAL_SCORECARD;

    /*********************SSP_DIGITAL_SCORECARD ends *****************/
    /*********************SSP_NOTIFICATION_DETAILS start *****************/

    var SSP_NOTIFICATION_DETAILS = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_NOTIFICATION_DETAILS.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_NOTIFICATION_DETAILS = SSP_NOTIFICATION_DETAILS;

    /*********************SSP_NOTIFICATION_DETAILS ends *****************/
    /*********************PROFILE_COMPLETION start *****************/

    var PROFILE_COMPLETION = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PROFILE_COMPLETION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PROFILE_COMPLETION = PROFILE_COMPLETION;

    /*********************PROFILE_COMPLETION ends *****************/
    /*********************LEAD_GENERATE start *****************/

    var LEAD_GENERATE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.LEAD_GENERATE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.LEAD_GENERATE = LEAD_GENERATE;

    /*********************LEAD_GENERATE ends *****************/
    /*********************SSP_ACCOUNT_LOCKED start *****************/

    var SSP_ACCOUNT_LOCKED = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_ACCOUNT_LOCKED.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_ACCOUNT_LOCKED = SSP_ACCOUNT_LOCKED;

    /*********************SSP_ACCOUNT_LOCKED ends *****************/
    /*********************SSP_AUTOPAY_TRIGGER start *****************/

    var SSP_AUTOPAY_TRIGGER = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_AUTOPAY_TRIGGER.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_AUTOPAY_TRIGGER = SSP_AUTOPAY_TRIGGER;

    /*********************SSP_AUTOPAY_TRIGGER ends *****************/
    /*********************SSP_VIDEO_UPLOAD start *****************/

    var SSP_VIDEO_UPLOAD = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_VIDEO_UPLOAD.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_VIDEO_UPLOAD = SSP_VIDEO_UPLOAD;

    /*********************SSP_VIDEO_UPLOAD ends *****************/
    /*********************SSP_CLICK_ON_BANNERS start *****************/

    var SSP_CLICK_ON_BANNERS = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_CLICK_ON_BANNERS.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_CLICK_ON_BANNERS = SSP_CLICK_ON_BANNERS;

    /*********************SSP_CLICK_ON_BANNERS ends *****************/
    /*********************SSP_TWO_COMMON_NOTIFICATION start *****************/

    var SSP_TWO_COMMON_NOTIFICATION = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SSP_TWO_COMMON_NOTIFICATION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SSP_TWO_COMMON_NOTIFICATION = SSP_TWO_COMMON_NOTIFICATION;

    /*********************SSP_TWO_COMMON_NOTIFICATION ends *****************/

    /******************** ARTICLE BLOG START *********************** */

    var ARTICLE_BLOG_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ARTICLE_BLOG.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ARTICLE_BLOG_CALL = ARTICLE_BLOG_CALL;

    /*********************PQ_SUBMIT ends *****************/

    var POLICIES_SOLD_SERVICE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.POLICIES_SOLD_SERVICE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.POLICIES_SOLD_SERVICE_CALL = POLICIES_SOLD_SERVICE_CALL;

    var GET_PQ_RESULT_CALL = function (url, data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(url, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.GET_PQ_RESULT_CALL = GET_PQ_RESULT_CALL;

    var GET_PQ_DISCLAIMER_CALL = function (url, data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(url, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.GET_PQ_DISCLAIMER_CALL = GET_PQ_DISCLAIMER_CALL;

    var GET_PQ_JSON_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(apiConstants.GET_PQ_JSON.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.GET_PQ_JSON_CALL = GET_PQ_JSON_CALL;

    var GET_PQ_SUTAIBLE_PLANS_CALL = function (url, data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(url, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.GET_PQ_SUTAIBLE_PLANS_CALL = GET_PQ_SUTAIBLE_PLANS_CALL;

    /******************** ARTICLE BLOG END *********************** */
    /******************** ARTICLE VIDEO START *********************** */

    var ARTICLE_VIDEO_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ARTICLE_VIDEO.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ARTICLE_VIDEO_CALL = ARTICLE_VIDEO_CALL;

    /******************** ARTICLE VIDEO END *********************** */
    /*********************PQ_SUBMIT start *****************/
    var PQ_SUBMIT = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PQ_SUBMIT.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.PQ_SUBMIT = PQ_SUBMIT;

    /*********************PQ_SUBMIT ends *****************/

    /*********************CITY_MEET_GET_CALL STARTS *****************/
    var CITY_MEET_GET = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.CITY_MEET_GET_CALL.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.CITY_MEET_GET = CITY_MEET_GET;
    /*********************CITY_MEET_GET_CALL eNDS *****************/

    var CITY_NAMES_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(apiConstants.CITY_NAMES.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;
            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.CITY_NAMES_CALL = CITY_NAMES_CALL;

    var COMPANY_NAMES_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(apiConstants.COMPANY_NAMES.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.COMPANY_NAMES_CALL = COMPANY_NAMES_CALL;

    /*********************COUNTRY_MASTER STARTS *****************/
    var COUNTRY_MASTER_GET = function (data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(apiConstants.COUNTRY_MASTER.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.COUNTRY_MASTER_GET = COUNTRY_MASTER_GET;
    /*********************COUNTRY_MASTER eNDS *****************/

    var INCOME_CALC_CALL = function (url, data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(url, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.INCOME_CALC_CALL = INCOME_CALC_CALL;

    /*********************STATE_MASTER STARTS *****************/
    var STATE_MASTER_GET = function (data) {

      return new Promise(function (resolve, reject) {
        cfgetcall(apiConstants.STATE_MASTER.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          }).catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    }
    apiUtilityObj.STATE_MASTER_GET = STATE_MASTER_GET;


    var COMPANY_NAMES_CALL_HINDI = function (data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(apiConstants.COMPANY_NAMES_HINDI.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {

              resolve(response);
            } else {
              reject(response);
            }
          }).catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    }
    apiUtilityObj.COMPANY_NAMES_CALL_HINDI = COMPANY_NAMES_CALL_HINDI;

    /*********************STATE_MASTER eNDS *****************/

    /*********************Press Release START *****************/
    var PRESS_RELEASE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(apiConstants.PRESS_RELEASE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }

            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          }).catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    }

    apiUtilityObj.PRESS_RELEASE_CALL = PRESS_RELEASE_CALL;
    /*********************Press Release END *****************/

    /* ------------ JSON TO PDF AND CSV CONVERTOR START --------------  */
    var JSON_TO_PDF_CSV = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.JSON_TO_PDF_CSV.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.JSON_TO_PDF_CSV = JSON_TO_PDF_CSV;
    /* ------------ JSON TO PDF AND CSV CONVERTOR END --------------  */

    /*********************SUITABILITY_CF_CALL starts *****************/
    var SUITABILITY_CF_CALL = function (url, data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(url, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          }).catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    }
    apiUtilityObj.SUITABILITY_CF_CALL = SUITABILITY_CF_CALL;
    /*********************SUITABILITY_CF_CALL eNDS *****************/

    /*********************HINDI_API_CALL STARTS *****************/

    var HINDI_API_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        getcall(apiConstants.HINDI_TRANSLATOR.endpoint + "." + multiLangEndPoint(), data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.HINDI_API_CALL = HINDI_API_CALL;
    /*********************HINDI_API_CALL ENDS *****************/

    /*********************ABHA STARTS *****************/
    var ABHA_ADHAR_GENERATE_OTP = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_ADHAR_GENERATE_OTP.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_ADHAR_GENERATE_OTP = ABHA_ADHAR_GENERATE_OTP;

    var ABHA_ADHAR_VERIFY_OTP = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_ADHAR_VERIFY_OTP.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_ADHAR_VERIFY_OTP = ABHA_ADHAR_VERIFY_OTP;

    var ABHA_ADHAR_REGENERATE_OTP = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_ADHAR_REGENERATE_OTP.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_ADHAR_REGENERATE_OTP = ABHA_ADHAR_REGENERATE_OTP;

    var ABHA_CHECK_GENRATE_MOBILE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_CHECK_GENRATE_MOBILE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_CHECK_GENRATE_MOBILE = ABHA_CHECK_GENRATE_MOBILE;

    var ABHA_VERIFY_MOBILE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_VERIFY_MOBILE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_VERIFY_MOBILE = ABHA_VERIFY_MOBILE;

    var ABHA_SEARCH_AADHAR_OTP_VERIFY = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_SEARCH_AADHAR_OTP_VERIFY.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_SEARCH_AADHAR_OTP_VERIFY = ABHA_SEARCH_AADHAR_OTP_VERIFY;

    var ABHA_EXIST_BY_HEALTH_ID = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_EXIST_BY_HEALTH_ID.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_EXIST_BY_HEALTH_ID = ABHA_EXIST_BY_HEALTH_ID;

    var ABHA_UPDATE_PROFILE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_UPDATE_PROFILE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_UPDATE_PROFILE = ABHA_UPDATE_PROFILE;

    var ABHA_GET_QR_CODE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_GET_QR_CODE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_GET_QR_CODE = ABHA_GET_QR_CODE;

    var ABHA_CREATE_HEALTHID_WITH_AADHAROTP = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_CREATE_HEALTHID_WITH_AADHAROTP.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_CREATE_HEALTHID_WITH_AADHAROTP = ABHA_CREATE_HEALTHID_WITH_AADHAROTP;

    var ABHA_AUTH_INIT = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_AUTH_INIT.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_AUTH_INIT = ABHA_AUTH_INIT;

    var ABHA_CONFIRM_WITH_AADHAROTP = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_CONFIRM_WITH_AADHAROTP.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_CONFIRM_WITH_AADHAROTP = ABHA_CONFIRM_WITH_AADHAROTP;

    var ABHA_GET_ACCOUNT_PROFILE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_GET_ACCOUNT_PROFILE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_GET_ACCOUNT_PROFILE = ABHA_GET_ACCOUNT_PROFILE;

    var ABHA_ACCOUNT_GET_CARD = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_ACCOUNT_GET_CARD.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_ACCOUNT_GET_CARD = ABHA_ACCOUNT_GET_CARD;

    var ABHA_GET_CERTIFICATE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_GET_CERTIFICATE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_GET_CERTIFICATE = ABHA_GET_CERTIFICATE;

    var ABHA_CREATE_HEALTHID_SUGGETIONS = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_CREATE_HEALTHID_SUGGETIONS.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_CREATE_HEALTHID_SUGGETIONS = ABHA_CREATE_HEALTHID_SUGGETIONS;

    var ABHA_DOWNLOAD_ABHACARD = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_DOWNLOAD_ABHACARD.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_DOWNLOAD_ABHACARD = ABHA_DOWNLOAD_ABHACARD;

    var ABHA_SEARCH_BY_AADHARNO = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_SEARCH_BY_AADHARNO.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_SEARCH_BY_AADHARNO = ABHA_SEARCH_BY_AADHARNO;

    var ABHA_SEARCH_BY_AADHAR_OTP = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_SEARCH_BY_AADHAR_OTP.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_SEARCH_BY_AADHAR_OTP = ABHA_SEARCH_BY_AADHAR_OTP;

    var ABHA_SEARCH_BY_AABHANO = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_SEARCH_BY_AABHANO.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_SEARCH_BY_AABHANO = ABHA_SEARCH_BY_AABHANO;

    var ABHA_SEARCH_BY_HEALTHID = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_SEARCH_BY_HEALTHID.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_SEARCH_BY_HEALTHID = ABHA_SEARCH_BY_HEALTHID;

    var ABHA_GET_PROFILE = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ABHA_GET_PROFILE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ABHA_GET_PROFILE = ABHA_GET_PROFILE;

    /*********************ABHA ENDS *****************/

    /*********************COUNTRY_CODE_VALIDATION STARTS *****************/
    var COUNTRY_CODE_VALIDATION_GET = function (data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(apiConstants.COUNTRY_CODE_VALIDATION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;
            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          }).catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    }
    apiUtilityObj.COUNTRY_CODE_VALIDATION_GET = COUNTRY_CODE_VALIDATION_GET;
    /*********************COUNTRY_CODE_VALIDATION ENDS *****************/

    /*********************VALIDATE_WITHOUT_SSO start *****************/
    var VALIDATE_WITHOUT_SSO = function (data) {
      return new Promise(function (resolve, reject) {
        parseEncryptedData(data);
        call(apiConstants.VALIDATE_WITHOUT_SSO.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;
            if (jsHelper.isObj(responseJson)) {
              var decData = JSON.parse(
                crypto.decrypt(response.responseJson.response)
              );
              response.responseJson = decData;
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.VALIDATE_WITHOUT_SSO = VALIDATE_WITHOUT_SSO;
    /*********************VALIDATE_WITHOUT_SSO ends *****************/

    /******************** PAYMENT DIGIO START *********************** */

    var PAYMENT_DIGIO_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PAYMENT_DIGIO.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PAYMENT_DIGIO_CALL = PAYMENT_DIGIO_CALL;

    /******************** PAYMENT DIGIO END *********************** */

    /******************** TRANSACTION START START *********************** */

    var TRANSACTION_START_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        parseEncryptedData(data);
        call(apiConstants.TRANSACTION_START.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
              var decData = JSON.parse(
                crypto.decrypt(response.responseJson.response)
              );
              response.responseJson = decData;
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.TRANSACTION_START_CALL = TRANSACTION_START_CALL;

    /******************** TRANSACTION START ENDS *********************** */

    /******************** TRANSACTION END STARTS *********************** */

    var TRANSACTION_END_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        parseEncryptedData(data);
        call(apiConstants.TRANSACTION_END.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
              var decData = JSON.parse(
                crypto.decrypt(response.responseJson.response)
              );
              response.responseJson = decData;
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.TRANSACTION_END_CALL = TRANSACTION_END_CALL;

    /******************** PAYMENT DIGIO END *********************** */

    /******************** ACKNOWLEDGMENT STARTS *********************** */

    var ACKNOWLEDGMENT_SUCCESS_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.ACKNOWLEDGMENT_SUCCESS.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);

            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.ACKNOWLEDGMENT_SUCCESS_CALL = ACKNOWLEDGMENT_SUCCESS_CALL;

    /******************** ACKNOWLEDGMENT END *********************** */

    /******************** BILLDESK_MANDATE STARTS *********************** */

    var BILLDESK_CREATE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.BILLDESK_CREATE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.BILLDESK_CREATE_CALL = BILLDESK_CREATE_CALL;

    /******************** BILLDESK_MANDATE END *********************** */

    /******************** DIGIO_ENQUIRY STARTS *********************** */

    var DIGIO_ENQUIRY_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.DIGIO_ENQUIRY.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.DIGIO_ENQUIRY_CALL = DIGIO_ENQUIRY_CALL;

    /********************* DIGIO_ENQUIRY END ************************/

    /******************** BILLDESK_MANDATE STARTS *********************** */

    var BILLDESK_MANDATE_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.BILLDESK_MANDATE.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.BILLDESK_MANDATE_CALL = BILLDESK_MANDATE_CALL;

    /********************* BILLDESK_MANDATE END ************************/

    /******************** LAPSED_FORM STARTS *********************** */

    var LAPSED_FORM_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        parseEncryptedData(data);
        call(apiConstants.LAPSED_FORM.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
              var decData = JSON.parse(
                crypto.decrypt(response.responseJson.response)
              );
              response.responseJson = decData;
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.LAPSED_FORM_CALL = LAPSED_FORM_CALL;

    /******************** LAPSED_FORM ENDS *********************** */

    /******************** PAYMENT_STATUS_STARTS *********************** */

    var PAYMENT_STATUS = function (data) {
      return new Promise(function (resolve, reject) {
        parseEncryptedData(data);
        call(apiConstants.PAYMENT_STATUS.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
              var decData = JSON.parse(
                crypto.decrypt(response.responseJson.response)
              );
              response.responseJson = decData;
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PAYMENT_STATUS = PAYMENT_STATUS;

    /******************** PAYMENT_STATUS ENDS *********************** */
    /*********************COUNTRY_MASTER_NRI STARTS *****************/
    var COUNTRY_MASTER_NRI_GET = function (data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(apiConstants.COUNTRY_MASTER_NRI.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.COUNTRY_MASTER_NRI_GET = COUNTRY_MASTER_NRI_GET;
    /*********************COUNTRY_MASTER_NRI eNDS *****************/

    /*********************LIFE_PLANNER_API Start *****************/
    var LIFE_PLANNER_API = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.LIFE_PLANNER_API.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.LIFE_PLANNER_API = LIFE_PLANNER_API;

    /*********************LIFE_PLANNER_API End *****************/

    /*********************PRODUCT_CHECK_PREMIUM STARTS *****************/
    var PRODUCT_CHECK_PREMIUM = function (data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(apiConstants.PRODUCT_CHECK_PREMIUM.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PRODUCT_CHECK_PREMIUM = PRODUCT_CHECK_PREMIUM;
    /*********************PRODUCT_CHECK_PREMIUM END *****************/
    /*********************LIFE_PLANNER_API Start *****************/

    /********************* VOIP_API Start *****************/
    var VOIP_API = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.VOIP_API.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.VOIP_API = VOIP_API;
    /********************* VOIP_API End *****************/

    /********************* PREMIUM_QUOTATION Start *****************/
    var PREMIUM_QUOTATION = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PREMIUM_QUOTATION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PREMIUM_QUOTATION = PREMIUM_QUOTATION;
    /********************* PREMIUM_QUOTATION End *****************/

    /********************* EMPLOYEE REFERRAL Start *****************/
    var EMPLOYEE_REFERRAL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.EMPLOYEE_REFERRAL.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.EMPLOYEE_REFERRAL = EMPLOYEE_REFERRAL;
    /********************* EMPLOYEE REFERRAL End  *****************/

    /********************* PAYMENT PREFILL Start *****************/
    var PAYMENT_PREFILLAPI = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.PAYMENT_PREFILLAPI.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.PAYMENT_PREFILLAPI = PAYMENT_PREFILLAPI;
    /********************* PAYMENT PREFILL End  *****************/

    /********************* UNCLAIMED AUTHENTICATION START *****************/
    var UNCLAIMED_AUTHENTICATION_API_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.UNCLAIMED_AUTHENTICATION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.UNCLAIMED_AUTHENTICATION_API_CALL = UNCLAIMED_AUTHENTICATION_API_CALL;
    /********************* UNCLAIMED AUTHENTICATION END  *****************/

    /********************* EMail Suggest START  *****************/

    var GET_EMAIL_SUGGEST_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(apiConstants.EMAIL_SUGGESTION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.GET_EMAIL_SUGGEST_CALL = GET_EMAIL_SUGGEST_CALL;

    /********************* EMail Suggest END  *****************/

    /****************GRIEVANCE REDRESSAL DATA*************************/
    var getGrievanceRedressalData = function (data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(apiConstants.GRIEVANCE_REDRESSAL_DATA.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.getGrievanceRedressalData = getGrievanceRedressalData;

    /****************GRIEVANCE REDRESSAL DATA*************************/

    var POLICY_SOLD_COUNT_CALL = function (data) {
      return new Promise(function (resolve, reject) {
        cfgetcall(apiConstants.POLICY_SOLD_COUNT.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.POLICY_SOLD_COUNT_CALL = POLICY_SOLD_COUNT_CALL;

 /********************* SMART_PENSION_QUOTATION Start *****************/
    var SMART_PENSION_QUOTATION = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SMART_PENSION_QUOTATION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.SMART_PENSION_QUOTATION = SMART_PENSION_QUOTATION;
    /********************* PREMIUM_QUOTATION End *****************/

    /********************* SUBH_COMBO_QUOTATION Start *****************/

    var SUBH_COMBO_QUOTATION = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SUBH_COMBO_QUOTATION.endpoint, data)
        .then(function (response) {
          if (jsHelper.isStr(response)) {
            response = jsHelper.parseJson(response);
          }
          var responseJson = response;

          if (jsHelper.isObj(responseJson)) {
            resolve(response);
          } else {
            reject(response);
          }
        })
        .catch(function (err) {
          reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
        });
      });
    };
    apiUtilityObj.SUBH_COMBO_QUOTATION = SUBH_COMBO_QUOTATION;
    /********************* SUBH_COMBO_QUOTATION End *****************/

    /********************* GLOBALCAL_QUOTATION Start *****************/
    var GLOBALCAL_QUOTATION = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.GLOBALCAL_QUOTATION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.GLOBALCAL_QUOTATION =  GLOBALCAL_QUOTATION;
    /********************* GLOBALCAL_QUOTATION End *****************/

    /********************* SIDDHI ENCRYPTION START *****************/
    var SIDDHI_ENCRYPTION_API = function (data) {
      return new Promise(function (resolve, reject) {
         call(apiConstants.SIDDHI_ENCRYPTION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SIDDHI_ENCRYPTION_API =  SIDDHI_ENCRYPTION_API;
    /********************* SIDDHI ENCRYPTION END  *****************/

    /********************* SIDDHI DECRYPTION START *****************/
    var SIDDHI_DECRYPTION_API = async function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SIDDHI_DECRYPTION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SIDDHI_DECRYPTION_API = SIDDHI_DECRYPTION_API;
    /********************* SIDDHI DECRYPTION END  *****************/

     /********************* SIDDHI Lead API START *****************/
    var SIDDHI_LEAD_API = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.SIDDHI_LEAD_API.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };
    apiUtilityObj.SIDDHI_LEAD_API = SIDDHI_LEAD_API;
    /********************* SIDDHI Lead API END  *****************/

    /********************* GLOBALCAL_QUOTATION Start *****************/
    var GLOBALCAL_QUOTATION = function (data) {
      return new Promise(function (resolve, reject) {
        call(apiConstants.GLOBALCAL_QUOTATION.endpoint, data)
          .then(function (response) {
            if (jsHelper.isStr(response)) {
              response = jsHelper.parseJson(response);
            }
            var responseJson = response;

            if (jsHelper.isObj(responseJson)) {
              resolve(response);
            } else {
              reject(response);
            }
          })
          .catch(function (err) {
            reject(jsHelper.isObj(err) ? defaultCallbackErr.errorMessage : err);
          });
      });
    };

    apiUtilityObj.GLOBALCAL_QUOTATION = GLOBALCAL_QUOTATION;
    /********************* GLOBALCAL_QUOTATION End *****************/
   
    return jsHelper.freezeObj(apiUtilityObj);
  })(
    _global.jsHelper,
    _global.appConfig,
    _global.apiConstants,
    _global.ajaxUtility
  );

  _global.jsHelper.defineReadOnlyObjProp(_global, "apiUtility", _apiUtility);
})(this);

/*******************************************Base64 Module - Start******************************************************/
(function (_global) {
    var _base64 = (function (jsHelper) {
        if (exceptionUtility) {
            exceptionUtility.dependencyCheck([jsHelper], "Base64");
        }
        var base64Obj = {};
        /* Create Base64 Object */
        var Base64 = {
            _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
            encode: function (e) {
                var t = "";
                var n, r, i, s, o, u, a;
                var f = 0;
                e = Base64._utf8_encode(e);
                while (f < e.length) {
                    n = e.charCodeAt(f++);
                    r = e.charCodeAt(f++);
                    i = e.charCodeAt(f++);
                    s = n >> 2;
                    o = (n & 3) << 4 | r >> 4;
                    u = (r & 15) << 2 | i >> 6;
                    a = i & 63;
                    if (isNaN(r)) {
                        u = a = 64
                    } else if (isNaN(i)) {
                        a = 64
                    }
                    t = t + Base64._keyStr.charAt(s) + Base64._keyStr.charAt(o) + Base64._keyStr.charAt(u) + Base64._keyStr.charAt(a)
                }
                return t
            },
            decode: function (e) {
                var t = "";
                var n, r, i;
                var s, o, u, a;
                var f = 0;
                e = e.replace(/[^A-Za-z0-9+/=]/g, "");
                while (f < e.length) {
                    s = Base64._keyStr.indexOf(e.charAt(f++));
                    o = Base64._keyStr.indexOf(e.charAt(f++));
                    u = Base64._keyStr.indexOf(e.charAt(f++));
                    a = Base64._keyStr.indexOf(e.charAt(f++));
                    n = s << 2 | o >> 4;
                    r = (o & 15) << 4 | u >> 2;
                    i = (u & 3) << 6 | a;
                    t = t + String.fromCharCode(n);
                    if (u != 64) {
                        t = t + String.fromCharCode(r)
                    }
                    if (a != 64) {
                        t = t + String.fromCharCode(i)
                    }
                }
                t = Base64._utf8_decode(t);
                return t
            },
            _utf8_encode: function (e) {
                e = e.replace(/rn/g, "n");
                var t = "";
                for (var n = 0; n < e.length; n++) {
                    var r = e.charCodeAt(n);
                    if (r < 128) {
                        t += String.fromCharCode(r)
                    } else if (r > 127 && r < 2048) {
                        t += String.fromCharCode(r >> 6 | 192);
                        t += String.fromCharCode(r & 63 | 128)
                    } else {
                        t += String.fromCharCode(r >> 12 | 224);
                        t += String.fromCharCode(r >> 6 & 63 | 128);
                        t += String.fromCharCode(r & 63 | 128)
                    }
                }
                return t
            },
            _utf8_decode: function (e) {
                var t = "";
                var n = 0;
                var r = c1 = c2 = 0;
                while (n < e.length) {
                    r = e.charCodeAt(n);
                    if (r < 128) {
                        t += String.fromCharCode(r);
                        n++
                    } else if (r > 191 && r < 224) {
                        c2 = e.charCodeAt(n + 1);
                        t += String.fromCharCode((r & 31) << 6 | c2 & 63);
                        n += 2
                    } else {
                        c2 = e.charCodeAt(n + 1);
                        c3 = e.charCodeAt(n + 2);
                        t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
                        n += 3
                    }
                }
                return t
            }
        };

        base64Obj.encode = Base64.encode;
        base64Obj.decode = Base64.decode;

        return _global.jsHelper.freezeObj(base64Obj);
    })(_global.jsHelper);
    _global.jsHelper.defineReadOnlyObjProp(_global, 'base64', _base64);
})(this);
/*******************************************Base64 Module - End******************************************************/

/*******************************************_UI Object Utility Module - Start******************************************************/



(function(_global){
    var _UIObjectUtility = (function (jsHelper) {
        var UIObjectUtilityObj = {};



          var _switchMonthDate = function switchMonthDate(date){
            if(jsHelper.isDefined(date))  {
                var dateArr = date.split("/");
                var date = dateArr[0];
                var month = dateArr[1];
                dateArr[0] = month;
                dateArr[1] = date;
                date = dateArr.join('/');
            }
            return date;
        }



        UIObjectUtilityObj.switchMonth = _switchMonthDate;




        var toServiceDate = function toServiceDate(date,switchMonthDate){
            if(jsHelper.isTrue(switchMonthDate)){
                date = _switchMonthDate(date);
            }
            if(jsHelper.isValidDate(date)){
                if(jsHelper.isStr(date)){
                    date = new Date(Date.parse(date));
                }
                var gmtStr = date.toString();
                var substrArr = gmtStr.substring(4,gmtStr.length-9).split(" ");
                return [substrArr[1],substrArr[0],substrArr[2]].join("-");
            }
        }
        UIObjectUtilityObj.toServiceDate = toServiceDate;




        var getTodayServiceDate = function getTodayServiceDate(){
            return toServiceDate(new Date());
        }
        UIObjectUtilityObj.getTodayServiceDate = getTodayServiceDate;



        var toServiceAge = function toServiceAge(dob, switchMonthDate) {
            var date;
            if (jsHelper.isTrue(switchMonthDate)) {
                date = _switchMonthDate(dob);
            } else {
                date = dob;
            }
            if (jsHelper.isValidDate(date)) {
                if (jsHelper.isStr(date)) {
                    date = new Date(Date.parse(date));
                }
                return Math.abs((new Date(Date.now() - date.getTime())).getUTCFullYear() - 1970);
            }
        }
        UIObjectUtilityObj.toServiceAge = toServiceAge;




        var toServiceGender = function(gender){
            if(jsHelper.isStr(gender)){
                switch(gender.toLowerCase()){
                    case "male":
                        return "M";
                    case "female":
                        return "F";
                    case "transgender":
                        return "T";
                }
            }
        }
        UIObjectUtilityObj.toServiceGender = toServiceGender;




        var toUIGender = function(gender){
            if(jsHelper.isStr(gender)){
                switch(gender.toLowerCase()){
                    case "m":
                        return "Male";
                    case "f":
                        return "Female";
                    case "t":
                        return "Transgender";
                }
            }
        }
        UIObjectUtilityObj.toUIGender = toUIGender;



        var toServiceHeight = function(feet,inch){
            return (jsHelper.isNum(jsHelper.toNum(feet)) && jsHelper.isNum(jsHelper.toNum(inch))) ? (feet+" ft "+inch+" in") : "";
        }
        UIObjectUtilityObj.toServiceHeight = toServiceHeight;



        var downloadPolicyDocument = function downloadPolicyDocument(uiObj){
            var convertObjToQueryString = function(obj,addQm){
                var queryString = "";
                var qm = "?";
                var amp = "&";
                if(obj && (typeof(obj)==="object")){
                    if(addQm===true){
                        queryString += qm;
                    }
                    Object.keys(obj).forEach(function(key,i){
                        if(i!==0){
                            queryString += amp;
                        }
                        queryString += (key + "=" + obj[key]);
                    });
                }
                return queryString;
            }



            var getPolicyReo = function(policyNo){
                if(policyNo && typeof(policyNo)==="string"){
                    var policyNoArr = policyNo.split('-');
                    return policyNoArr[policyNoArr.length-1];
                }
                return "";
            };



            var getQueryParamString = function(policyNo,prodId){
                var queryStringObj = {
                    "p_policy_ref" : policyNo,
                    "p_policy_reo" : getPolicyReo(policyNo),
                    "user_name" : "ONLINE",
                    "plocationcode":"9906"
                };



                if(jsHelper.orOneWithMany(prodId,"8429","8430","8432")){
                    queryStringObj["version"] = "";
                    queryStringObj["imd_code"] = "55555557";
                    queryStringObj["PRINT_FLAG"] = "ORG";
                }
                return convertObjToQueryString(queryStringObj,true);
            };



            var getActionUrl = function(prodId){
                var bagicNxtContext = "/BagicNxt/dp";
                switch(prodId){
                    case "8429":
                        return bagicNxtContext+"/HGIaction.do";
                    case "8430":
                        return bagicNxtContext+"/HGFaction.do";
                    case "8432":
                        return bagicNxtContext+"/ECPaction.do";
                    case "8407":
                        return "/Insurance/critical-illness/showCIpdf.do";
                }
                return "";
            }

            var getDownloadLink = function(uiObj){
                var domainUrl;
                var customEvent = new CustomEvent("osgi:AppConfig",{
                    detail:{
                        cb:function(osgiConfigConstants,structuredOsgiConfig){
                        var endpointUrlsObj = structuredOsgiConfig[osgiConfigConstants.ENDPOINT_URLS];
                            domainUrl = endpointUrlsObj["documentPolicyDocument"] ? endpointUrlsObj["documentPolicyDocument"] : "http://webservicesdev.bajajallianz.com";
                        }
                     }
                });
                document.dispatchEvent(customEvent);
                var commonUrl = domainUrl;
                return commonUrl + getActionUrl(uiObj.productId) + getQueryParamString(uiObj.policyNo,uiObj.productId);
            }



            var a = document.createElement('a');
            a.href = getDownloadLink(uiObj);
            a.target = "_blank";

            var body = document.getElementsByTagName('body')[0];
            body.append(a);

            a.click();
        }



        UIObjectUtilityObj.downloadPolicyDocument = downloadPolicyDocument;



        return jsHelper.freezeObj(UIObjectUtilityObj);
    })(_global.jsHelper);



    _global.jsHelper.defineReadOnlyObjProp(_global,'UIObjectUtility',_UIObjectUtility);
})(this);



/*******************************************UI Object Utility Module - Start******************************************************/
    /*******************************************Data Store Utlity - Start******************************************************/
    
   (function (_global) {
    
    /* Data Store Name - This value to be use as attribute or key to represent Data Store indentity. */
    var DATA_STORE_NAME = '__dataStore__';
    var COMMON_DATA_STORE_NAME = '__common__';

    /* Data Store Type Constants - Different types of Data Stores available in */
    var LOCAL_STORAGE_DATA_STORE = "LOCAL_STORAGE_DATA_STORE"; 
    var SESSION_STORAGE_DATA_STORE = "SESSION_STORAGE_DATA_STORE"; 
    var IN_MEMORY_DATA_STORE = "IN_MEMORY_DATA_STORE";
    var INDEX_DB_DATA_STORE = "INDEX_DB_DATA_STORE";

    /* Data Store Type Object Map */
    var _dataStoreObjMap = new Map();
    _dataStoreObjMap.set(LOCAL_STORAGE_DATA_STORE, new Map());
    _dataStoreObjMap.set(SESSION_STORAGE_DATA_STORE, new Map());
    _dataStoreObjMap.set(IN_MEMORY_DATA_STORE, new Map());
    _dataStoreObjMap.set(INDEX_DB_DATA_STORE, new Map());

    /* Data Store Base Implementation Class Function */     
    function BaseDataStore(name,dataStoreType){
        var _this = this;
        if (exceptionUtility) {
            exceptionUtility.dependencyCheck([_global.jsHelper], _this.constructor.name);
        }
        var jsHelper = _global.jsHelper;
        

        if (!_this || _this.constructor !== BaseDataStore) {
            exceptionUtility.throwErr("Constructor "+_this.constructor.name+" requires 'new'");
        }
        if(jsHelper.isUndefined(name)){
            exceptionUtility.throwErr("'name' is mandatory!");
        }
        if(jsHelper.isUndefined(dataStoreType)){
            exceptionUtility.throwErr("'dataStoreType' is mandatory!");
        }

        jsHelper.defineReadOnlyObjProps(_this,{
            'name' : name,
            'dataStoreType' : dataStoreType,
            'dataStoreMap' : _dataStoreObjMap.get(dataStoreType)
        });

        if(jsHelper.isUndefined(_this.dataStoreMap.get(name))){
            _this.dataStoreMap.set(name,{});
        }

    };
    BaseDataStore.prototype.set = function(key,value){
        this.dataStoreMap.get(this.name)[key] = value;
        return this;
    };
    BaseDataStore.prototype.unset = function(key,setNull){
        this.dataStoreMap.get(this.name)[key] = jsHelper.isTrue(setNull) ? null : undefined;
        return this;
    };
    BaseDataStore.prototype.get = function(key){
        return this.dataStoreMap.get(this.name)[key];
    };
    BaseDataStore.prototype.delete = function(key){
        return delete(this.dataStoreMap.get(this.name)[key]);
    };

    /* Data Store In Memmory Implementation Function */
    function InMemoryDataStore(name){
        var _this = this;
        BaseDataStore.call(_this,name,IN_MEMORY_DATA_STORE);

        jsHelper.freezeObj(_this);
    }
    jsHelper.extendFunc(BaseDataStore,InMemoryDataStore);

    /* Data Store Local Storage Implementation Function */
    function LocalStorageDataStore(name){
        var _this = this;

        BaseDataStore.call(_this,name,LOCAL_STORAGE_DATA_STORE);

        jsHelper.freezeObj(_this);
    }
    jsHelper.extendFunc(BaseDataStore,LocalStorageDataStore);

    /* Data Store Local Storage Implementation Function */
    function SessionStorageDataStore(name){
        var _this = this;

        BaseDataStore.call(_this,name,SESSION_STORAGE_DATA_STORE);

        jsHelper.freezeObj(_this);
    }
    jsHelper.extendFunc(BaseDataStore,SessionStorageDataStore);

    (function(){
        function populateStorageData(dataStoreObjString,dataStoreType){
            if(jsHelper.isDefined(dataStoreObjString)){
                var dataStoreObj = jsHelper.parseJson(dataStoreObjString);
                if(jsHelper.not(jsHelper.isEmpObj(dataStoreObj))) {
                    var dataStoreMap = _dataStoreObjMap.get(dataStoreType);
                    Object.keys(dataStoreObj).forEach(function (key) {
                        dataStoreMap.set(key, dataStoreObj[key]);
                    });
                }
            }
        }
        /**Load Data From Local Storage - Start**/
        var localDataStoreObjString = localStorage.getItem(DATA_STORE_NAME);
        if(jsHelper.isDefined(localDataStoreObjString,true)){
            populateStorageData(localDataStoreObjString,LOCAL_STORAGE_DATA_STORE);
            localStorage.removeItem(DATA_STORE_NAME);
        }
        /**Load Data From Local Storage - End**/
    
        /**Load Data From Session Storage - Start**/
        var sessionDataStoreObjString = sessionStorage.getItem(DATA_STORE_NAME);
        if(jsHelper.isDefined(localDataStoreObjString,true)){
            populateStorageData(sessionDataStoreObjString,SESSION_STORAGE_DATA_STORE);
            sessionStorage.removeItem(DATA_STORE_NAME);
        }        
        /**Load Data From Session Storage - End**/
    
        var writeData = function writeData(e){
            function _writeData(dataStoreMap){
                if(jsHelper.and(jsHelper.isDefined(dataStoreMap),jsHelper.not(jsHelper.isEqVal(dataStoreMap.size,0)))){
                    var dataStoreObj = {};
                    dataStoreMap.forEach(function(value,key){
                        dataStoreObj[key] = value;
                    });
                    return jsHelper.toObj(dataStoreObj);
                }
            }

            var localStorageDataStoreMap = _dataStoreObjMap.get(LOCAL_STORAGE_DATA_STORE);
            var lsDataStoreObj = _writeData(localStorageDataStoreMap);
            if(jsHelper.isDefined(lsDataStoreObj)){
                localStorage.setItem(DATA_STORE_NAME,jsHelper.stringifyJson(lsDataStoreObj));
            }

            var sessionStorageDataStoreMap = _dataStoreObjMap.get(SESSION_STORAGE_DATA_STORE);
            var ssDataStoreObj = _writeData(sessionStorageDataStoreMap);
            if(jsHelper.isDefined(ssDataStoreObj)){
                sessionStorage.setItem(DATA_STORE_NAME,jsHelper.stringifyJson(ssDataStoreObj));
            }
        };
        window.addEventListener('beforeunload',function(e){
            writeData(e);
        });
        window.addEventListener('unload',function(e){
            writeData(e);
        });
        window.addEventListener('pagehide',function(e){
            writeData(e);
        });
    })();
    


    /* DataStore Factory */
    function DataStore(name,dataStoreType){
        if(jsHelper.isEqVal(dataStoreType,IN_MEMORY_DATA_STORE)){
            return new InMemoryDataStore(name);
        }else if(jsHelper.isEqVal(dataStoreType,LOCAL_STORAGE_DATA_STORE)){
            return new LocalStorageDataStore(name);
        }else if(jsHelper.isEqVal(dataStoreType,SESSION_STORAGE_DATA_STORE)){
            return new SessionStorageDataStore(name);
        }
    }

    /* Data Store Utility */
    var _dataStoreUtility = (function (jsHelper) {
        if (exceptionUtility) {
            exceptionUtility.dependencyCheck([jsHelper], "Data Store Utility");
        }

        var _dataStoreUtilityObj =  {};

        /***Helper Methods - Start**/
        var _createDataStore = function (name,dataStoreType) {
            return DataStore(name,dataStoreType)
        };
        var _getDataStore = function (name,dataStoreType) {
           return jsHelper.isDefined(_dataStoreObjMap.get(dataStoreType).get(name),true) ? _createDataStore(name,dataStoreType) : null;
        };
        var _clearDataStore = function (name,dataStoreType) {
            _dataStoreObjMap.get(dataStoreType).set(name,Object.create({}));
            return this;
        };
        var _deleteDataStore = function (name,dataStoreType) {
            _dataStoreObjMap.get(dataStoreType).delete(name);
            return this;
        };
        /***Helper Methods - End**/

        var createDataStore = function createDataStore(name){
            return _createDataStore(name,IN_MEMORY_DATA_STORE);
        };
        _dataStoreUtilityObj.createDataStore = _dataStoreUtilityObj.createDS = createDataStore; 

        var createPersistentDataStore = function createPersistentDataStore(name){
            return _createDataStore(name,LOCAL_STORAGE_DATA_STORE);
        };
        _dataStoreUtilityObj.createPersistentDataStore = _dataStoreUtilityObj.createPDS = createPersistentDataStore;

        /** TODO: createSessionDataStore implementation*/
        var createSessionDataStore = function createSessionDataStore(name){
            return _createDataStore(name,SESSION_STORAGE_DATA_STORE);
        };
        _dataStoreUtilityObj.createSessionDataStore = _dataStoreUtilityObj.createSDS = createSessionDataStore;
        
        var getDataStore = function getDataStore(name){
            return _getDataStore(name,IN_MEMORY_DATA_STORE);
        };
        _dataStoreUtilityObj.getDataStore = _dataStoreUtilityObj.getDS = getDataStore;

        var getPersistentDataStore = function getPersistentDataStore(name){
            return _getDataStore(name,LOCAL_STORAGE_DATA_STORE);
        };
        _dataStoreUtilityObj.getPersistentDataStore = _dataStoreUtilityObj.getPDS = getPersistentDataStore;

        /** TODO: getSessionDataStore implementation*/
        var getSessionDataStore = function getSessionDataStore(name){
            return _getDataStore(name,SESSION_STORAGE_DATA_STORE);
        };
        _dataStoreUtilityObj.getSessionDataStore = _dataStoreUtilityObj.getSDS = getSessionDataStore;

        var deleteDataStore = function deletePersistentDataStore(name){
            return _deleteDataStore(name,IN_MEMORY_DATA_STORE);
        };
        _dataStoreUtilityObj.deleteDataStore = _dataStoreUtilityObj.deleteDS = deleteDataStore;

        var deletePersistentDataStore = function deletePersistentDataStore(name){
            return _deleteDataStore(name,LOCAL_STORAGE_DATA_STORE);
        };
        _dataStoreUtilityObj.deletePersistentDataStore = _dataStoreUtilityObj.deletePDS = deletePersistentDataStore;

        /** TODO: deleteSessionDataStore implementation*/
        var deletePersistentDataStore = function deletePersistentDataStore(name){
            return _deleteDataStore(name,SESSION_STORAGE_DATA_STORE);
        };
        _dataStoreUtilityObj.deletePersistentDataStore = _dataStoreUtilityObj.deleteSDS = deletePersistentDataStore;

        var clearDataStore = function clearPersistentDataStore(name){
            return _clearDataStore(name,IN_MEMORY_DATA_STORE);
        };
        _dataStoreUtilityObj.clearDataStore = _dataStoreUtilityObj.clearDS = clearDataStore;

        var clearPersistentDataStore = function clearPersistentDataStore(name){
            return _clearDataStore(name,LOCAL_STORAGE_DATA_STORE);
        };
        _dataStoreUtilityObj.clearPersistentDataStore = _dataStoreUtilityObj.clearPDS = clearPersistentDataStore;

        /** TODO: clearSessionDataStore implementation*/
        var clearSessionDataStore = function clearSessionDataStore(name){
            return _clearDataStore(name,SESSION_STORAGE_DATA_STORE);
        };
        _dataStoreUtilityObj.clearSessionDataStore = _dataStoreUtilityObj.clearSDS = clearSessionDataStore;

        return jsHelper.freezeObj(_dataStoreUtilityObj);
    })(_global.jsHelper);

    _global.jsHelper.defineReadOnlyObjProp(_global, 'dataStoreUtility', _dataStoreUtility);

})(window || this || {});

/*******************************************Data Store Utlity - End******************************************************/
$(document).on('api:publicdisclosure', function (e, obj) {
    console.info("publicdisclosure event triggered!", e, obj);

    var data = obj.data;
    var callback = obj.cb;

    var emptyReqObj = {};

    emptyReqObj = data;

    var headerJson = {
        "Content-Type": "application/json"
    }

    var reqObj = {
        "requestJson": emptyReqObj,
        "headerJson": headerJson
    }

    apiUtility.PUBLIC_DISCLOSURE(reqObj)
        .then(function (response) {
            console.log("response: ", response);

            if (jsHelper.isFunction(callback)) {
                callback(true, response);
            } else {
                console.warn("Callback is not a function!");
            }
        })
        .catch(function (error) {
            console.log("catch funcation call of get_quotation_api");
            if (jsHelper.isFunction(callback)) {
                callback(false, error);
            } else {
                console.warn("Callback is not a function!");
            }
        });
});

/******OTP Mobile Service*******/


$(document).on('api:triggerOTPMobileService', function (e, obj) {
    console.info("triggerOTPMobileService event triggered!", e, obj);

    var data = obj.data;
    var callback = obj.cb;

    var emptyReqObj = {};

    emptyReqObj = data;

    var headerJson = {
        "Content-Type": "application/json"
    }

    var reqObj = {
                "requestJson": emptyReqObj.requestJson,
                "tokenJson": emptyReqObj.tokenJson,
        		"headerJson": headerJson
    }

    apiUtility.OTP_MOBILE_SERVICE(reqObj)
        .then(function (response) {
            console.log("response: ", response);

            if (jsHelper.isFunction(callback)) {
                callback(true, response);
            } else {
                console.warn("Callback is not a function!");
            }
        })
        .catch(function (error) {
            console.log("catch funcation call of get_quotation_api");
            if (jsHelper.isFunction(callback)) {
                callback(false, error);
            } else {
                console.warn("Callback is not a function!");
            }
        });
});

/******CUSTOMER INFO Service*******/

$(document).on('api:customerPolicyInfoService', function (e, obj) {
    console.info("customerPolicyInfoService event triggered!", e, obj);

    var data = obj.data;
    var callback = obj.cb;
    var userSessionGlobal = JSON.parse(sessionStorage.getItem('userSession')).jwtToken;

    var emptyReqObj = {};

    emptyReqObj = data;

    var headerJson = {
        "Content-Type": "application/json"
    }

    var reqObj = {
        "requestJson": emptyReqObj,
        "headerJson": headerJson,
        "jwtToken": userSessionGlobal
    }

    apiUtility.CUST_INFO_SERVICE(reqObj)
        .then(function (response) {
            console.log("response: ", response);

            if (jsHelper.isFunction(callback)) {
                callback(true, response);
            } else {
                console.warn("Callback is not a function!");
            }
        })
        .catch(function (error) {
            console.log("catch funcation call of get_quotation_api");
            if (jsHelper.isFunction(callback)) {
                callback(false, error);
            } else {
                console.warn("Callback is not a function!");
            }
        });
});

/******Write to us Service*******/

$(document).on('api:writeToUs', function (e, obj) {
    console.info("writeToUs event triggered!", e, obj);

    var data = obj.data;
    var callback = obj.cb;

    var emptyReqObj = {};

    emptyReqObj = data.requestJson;
    var file = data.file;

    var headerJson = {
        "Content-Type": "application/json"
    }

    var reqObj = {
        "requestJson": emptyReqObj,
        "headerJson": headerJson
    }


    apiUtility.WRITE_TO_US(reqObj,file)
        .then(function (response) {
            console.log("response: ", response);

            if (jsHelper.isFunction(callback)) {
                callback(true, response);
            } else {
                console.warn("Callback is not a function!");
            }
        })
        .catch(function (error) {
            console.log("catch funcation call of write_to_us_api");
            if (jsHelper.isFunction(callback)) {
                callback(false, error);
            } else {
                console.warn("Callback is not a function!");
            }
        });
});
/******Request To Call Back*******/

$(document).on('api:callback', function (e, obj) {
    console.info("requestToCallBack event triggered!", e, obj);

    var data = obj.data;
    var callback = obj.cb;

    var emptyReqObj = {};

    emptyReqObj = data.requestJson;

    var headerJson = {
        "Content-Type": "application/json",
    }

    var reqObj = {
        "requestJson": emptyReqObj,
        "headerJson": headerJson
    }

    apiUtility.REQUEST_TO_CALL_BACK(reqObj)
        .then(function (response) {
            console.log("response: ", response);

            if (jsHelper.isFunction(callback)) {
                callback(true, response);
            } else {
                console.warn("Callback is not a function!");
            }
        })
        .catch(function (error) {
            console.log("catch funcation call of write_to_us_api");
            if (jsHelper.isFunction(callback)) {
                callback(false, error);
            } else {
                console.warn("Callback is not a function!");
            }
        });
});
var $searchCard = $(".search-container");
if($(".isChecked").attr("value") != "true"){
    $(".search-term").on('input', function (event) {
        var filtervalue = $('.ta-search input').val().toLowerCase();
        if (event.currentTarget.value.length == 0) {
            filtervalue = " ";
            }
            if (event.which == 13) {
                event.preventDefault();
            }

            
            $searchCard.hide();
            $searchCard.parent().parent().hide();
            $('[data-title*="' + filtervalue + '"]').show();
            $('[data-title*="' + filtervalue + '"]').parent().parent().show();
            /* hiding unwanted accordions if nothing appears in search */
            $(".type-of-claim").each(function(x, val){
                var liElements = val.querySelectorAll('.ta-fq-content-li')
                var allVisiable = 0;
                liElements.forEach(function(value){
                    if(value.style.display !== "none"){
                        allVisiable++;
                    }
                })
                if(allVisiable == 0){
                    $(val).hide();
                }else{
                    $(val).show();
                }
            });

    });
}
    


$(".ta-search").submit(function(e) {
    e.preventDefault();
    $(".search-term").input();
});


/* Glossary tag search */

$(".filter-div button").click(function (e) {
        e.preventDefault();
        var filterValues = $(this).data('category');
  
        if(filterValues == 'all') {
           	$searchCard.show();
            $searchCard.parent().parent().show();
        }else {
            $searchCard.hide();
            $searchCard.parent().parent().hide();
            $('[data-category*="'+ filterValues +'"]').show();
            $('[data-category*="'+ filterValues +'"]').parent().parent().show();
        }
      $(".filter-div button").removeClass("active");
      $(this).addClass("active");
  });

